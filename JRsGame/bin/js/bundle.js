var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
				value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**This class is automatically generated by LayaAirIDE, please do not make any modifications. */


var _mainScene = require("./scene/mainScene");

var _mainScene2 = _interopRequireDefault(_mainScene);

var _RouteLay = require("./panels/RouteLay");

var _RouteLay2 = _interopRequireDefault(_RouteLay);

var _ShipContainer = require("./components/ShipContainer");

var _ShipContainer2 = _interopRequireDefault(_ShipContainer);

var _targetSwitch = require("./components/targetSwitch");

var _targetSwitch2 = _interopRequireDefault(_targetSwitch);

var _infoLay = require("./panels/infoLay");

var _infoLay2 = _interopRequireDefault(_infoLay);

var _planLay = require("./panels/planLay");

var _planLay2 = _interopRequireDefault(_planLay);

var _SceneLayer = require("./components/SceneLayer");

var _SceneLayer2 = _interopRequireDefault(_SceneLayer);

var _buildTrip = require("./panels/buildTrip");

var _buildTrip2 = _interopRequireDefault(_buildTrip);

var _deskTrip = require("./panels/deskTrip");

var _deskTrip2 = _interopRequireDefault(_deskTrip);

var _dockPos = require("./panels/dockPos");

var _dockPos2 = _interopRequireDefault(_dockPos);

var _proTrip = require("./panels/proTrip");

var _proTrip2 = _interopRequireDefault(_proTrip);

var _resourceAlt = require("./panels/resourceAlt");

var _resourceAlt2 = _interopRequireDefault(_resourceAlt);

var _repeatMove = require("./components/repeatMove");

var _repeatMove2 = _interopRequireDefault(_repeatMove);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameConfig = function () {
				function GameConfig() {
								_classCallCheck(this, GameConfig);
				}

				_createClass(GameConfig, null, [{
								key: "init",
								value: function init() {
												//注册Script或者Runtime引用
												var reg = Laya.ClassUtils.regClass;
												reg("scene/mainScene.js", _mainScene2.default);
												reg("panels/RouteLay.js", _RouteLay2.default);
												reg("components/ShipContainer.js", _ShipContainer2.default);
												reg("components/targetSwitch.js", _targetSwitch2.default);
												reg("panels/infoLay.js", _infoLay2.default);
												reg("panels/planLay.js", _planLay2.default);
												reg("components/SceneLayer.js", _SceneLayer2.default);
												reg("panels/buildTrip.js", _buildTrip2.default);
												reg("panels/deskTrip.js", _deskTrip2.default);
												reg("panels/dockPos.js", _dockPos2.default);
												reg("panels/proTrip.js", _proTrip2.default);
												reg("panels/resourceAlt.js", _resourceAlt2.default);
												reg("components/repeatMove.js", _repeatMove2.default);
								}
				}]);

				return GameConfig;
}();

exports.default = GameConfig;

GameConfig.width = 640;
GameConfig.height = 960;
GameConfig.scaleMode = "showall";
GameConfig.screenMode = "horizontal";
GameConfig.alignV = "top";
GameConfig.alignH = "center";
GameConfig.startScene = "Main.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = true;
GameConfig.stat = false;
GameConfig.physicsDebug = true;
GameConfig.exportSceneToJson = true;

GameConfig.init();

},{"./components/SceneLayer":3,"./components/ShipContainer":4,"./components/repeatMove":6,"./components/targetSwitch":7,"./panels/RouteLay":16,"./panels/buildTrip":17,"./panels/deskTrip":18,"./panels/dockPos":19,"./panels/infoLay":20,"./panels/planLay":21,"./panels/proTrip":22,"./panels/resourceAlt":23,"./scene/mainScene":24}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameConfig = require("./GameConfig");

var _GameConfig2 = _interopRequireDefault(_GameConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
	function Main() {
		_classCallCheck(this, Main);

		//根据IDE设置初始化引擎		
		if (window["Laya3D"]) Laya3D.init(_GameConfig2.default.width, _GameConfig2.default.height);else Laya.init(_GameConfig2.default.width, _GameConfig2.default.height, Laya["WebGL"]);
		Laya["Physics"] && Laya["Physics"].enable();
		Laya["DebugPanel"] && Laya["DebugPanel"].enable();
		Laya.stage.scaleMode = _GameConfig2.default.scaleMode;
		Laya.stage.screenMode = _GameConfig2.default.screenMode;
		Laya.stage.alignV = _GameConfig2.default.alignV;
		Laya.stage.alignH = _GameConfig2.default.alignH;
		//兼容微信不支持加载scene后缀场景
		Laya.URL.exportSceneToJson = _GameConfig2.default.exportSceneToJson;

		//打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
		if (_GameConfig2.default.debug || Laya.Utils.getQueryString("debug") == "true") Laya.enableDebugPanel();
		if (_GameConfig2.default.physicsDebug && Laya["PhysicsDebugDraw"]) Laya["PhysicsDebugDraw"].enable();
		if (_GameConfig2.default.stat) Laya.Stat.show();
		Laya.alertGlobalError = true;

		//激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
		Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
	}

	_createClass(Main, [{
		key: "onVersionLoaded",
		value: function onVersionLoaded() {
			//激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
			Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
		}
	}, {
		key: "onConfigLoaded",
		value: function onConfigLoaded() {
			//加载IDE指定的场景
			_GameConfig2.default.startScene && Laya.Scene.open(_GameConfig2.default.startScene);
		}
	}]);

	return Main;
}();
//激活启动类


new Main();

},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

var _dock = require("../data/dock");

var _dock2 = _interopRequireDefault(_dock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SceneLayer = function (_Laya$Script) {
    _inherits(SceneLayer, _Laya$Script);

    /** @prop {name:dockPos,tips:"使用的船位Panel",type:Prefab} */
    /** @prop {name:routeLay,tips:"航道使用的Panel",type:Prefab} */
    /** @prop {name:proTrips,tips:"属性使用的Panel",type:Prefab} */
    /** @prop {name:deskTrip,tips:"仓库使用的Panel",type:Prefab} */
    /** @prop {name:buildTrip,tips:"建造使用的Panel",type:Prefab} */
    /** @prop {name:resAlt,tips:"资源窗使用的Panel",type:Prefab} */

    function SceneLayer() {
        _classCallCheck(this, SceneLayer);

        return _possibleConstructorReturn(this, (SceneLayer.__proto__ || Object.getPrototypeOf(SceneLayer)).call(this));
    }

    _createClass(SceneLayer, [{
        key: "setAltLayer",
        value: function setAltLayer() {
            this.altRes = this.resAlt.create();
            this.owner.addChild(this.altRes);

            this.altRes.zOrder = 500;
            this.altRes.visible = false;
            this.altRes.pos(-150, -150);

            this.cover = this.owner.AllCov;
            this.cover.on(Laya.Event.CLICK, this, function (event) {
                event.stopPropagation();
            });

            this.cover.visible = false;

            var _this = this;
            this.altRes.cancelCallBack = function (event) {
                _this.altRes.visible = false;
                _this.altRes.pos(-150, -150);
                _this.cover.visible = false;
            };
        }
    }, {
        key: "setRoutePanel",
        value: function setRoutePanel(layer) {
            this.curRouter = layer;
            this.routes = [];

            this.refreshAllRouters();
            this.refreshRouterZorder();
        }
    }, {
        key: "setDockPanel",
        value: function setDockPanel(layer) {
            this.dockPanel = layer;
            this.poses = [];

            this.refreshAllPoses();
            this.dragCallback = function () {};
        }
    }, {
        key: "setInfoPanel",
        value: function setInfoPanel(layer) {
            this.infoPanel = layer;
            this.infos = [];

            var pros = [{ name: "speed", proName: "baseSpeed", lenfunc: function lenfunc(num) {
                    return num / 500;
                } }, { name: "steve", proName: "baseLoad", lenfunc: function lenfunc(num) {
                    return 20 / (num + 1);
                } }, { name: "capacity", proName: "maxcap", lenfunc: function lenfunc(num) {
                    return num / 1000;
                } }, { name: "power", proName: "battle", lenfunc: function lenfunc(num) {
                    return num / 300;
                } }, { name: "repair", proName: "repair", lenfunc: function lenfunc(num) {
                    return 4 / (num + 1);
                } }];

            this.refreshAllPros(pros);
        }
    }, {
        key: "setDeskPanel",
        value: function setDeskPanel(layer) {
            this.deskLay = layer;
            this.desks = [];

            this.refreshAllDeskes();
        }
    }, {
        key: "setBuildPanel",
        value: function setBuildPanel(layer) {
            this.buildLay = layer;
            this.buildTrips = [];

            this.refreshAllBuilds();
        }
    }, {
        key: "setDragCallback",
        value: function setDragCallback(_func) {
            this.dragCallback = _func;
        }
    }, {
        key: "refreshAllRouters",
        value: function refreshAllRouters() {
            var count = _GameDatas2.default.instance.getRouteUnlockCount();
            var current = _GameDatas2.default.instance.currentRoute;

            for (var index = 0; index < count; index++) {
                if (index != current) {
                    this.unlockRoute(index);
                }
            }

            this.curRouter.routeIndex = current;
            this.routes.push(this.curRouter);
        }
    }, {
        key: "refreshRouterZorder",
        value: function refreshRouterZorder() {
            var current = _GameDatas2.default.instance.currentRoute;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.routes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var lay = _step.value;

                    if (lay.routeIndex == current) {
                        lay.zOrder = 10;
                        lay.visible = true;
                    } else {
                        lay.zOrder = 0;
                        lay.visible = false;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "unlockRoute",
        value: function unlockRoute(index) {
            var route = this.routeLay.create();
            route.pos(this.curRouter.x, this.curRouter.y);

            route.routeIndex = index;
            route.setRoute(_GameDatas2.default.instance.getRouteByIndex(index));

            this.curRouter.parent.addChild(route);
            this.routes.push(route);
        }
    }, {
        key: "updateRoute",
        value: function updateRoute(index) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.routes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var lay = _step2.value;

                    if (lay.routeIndex == index) {
                        lay.refreshRoute();
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "refreshAllPoses",
        value: function refreshAllPoses() {
            var curDock = _GameDatas2.default.instance.dock;

            for (var i = 0; i < curDock.GetShipCap(); i++) {
                this.insertPos(i, curDock.GetShipSet(i));
            }

            var _this = this;
            curDock.setDockCallBack(function (flag, index) {
                if (flag == "busy") {
                    _this.poses[index].setBusy();
                } else if (flag == "resume") {
                    _this.poses[index].resumeBusy();
                }
            });
        }
    }, {
        key: "insertPos",
        value: function insertPos(index, shipSet) {
            var posSet = this.dockPos.create();
            posSet.placeShip(shipSet);

            this.poses[index] = posSet;

            var indexPos = this.getPosByIndex(index);
            posSet.pos(indexPos.x, indexPos.y);
            posSet.posIndex = index;

            this.dockPanel.addChild(posSet);

            posSet.setClickCallBack(function (set) {
                if (posSet.busy) {
                    _GameDatas2.default.instance.backShip(posSet.posIndex);
                }
            });

            var _this = this;
            posSet.setdragPlaceCallBack(function (flag, event) {
                event.flag = flag;
                _this.dragCallback(posSet.posIndex, event);

                if (flag == "release" || flag == "hoverOut") posSet.backPos();
            });
        }
    }, {
        key: "updateAllDockPos",
        value: function updateAllDockPos() {
            var curDock = _GameDatas2.default.instance.dock;
            if (this.poses.length >= curDock.GetShipCap()) return;

            for (var stIndex = this.poses.length; stIndex < curDock.GetShipCap(); stIndex++) {
                this.insertPos(stIndex, curDock.GetShipSet(stIndex));
            }
        }
    }, {
        key: "updateAllBuildTrip",
        value: function updateAllBuildTrip() {
            var count = _GameDatas2.default.instance.buildCap;
            var tripNum = this.buildTrips.length;

            for (var index = tripNum; index < count; index++) {
                var trip = this.buildTrip.create();
                this.buildLay.addChild(trip);
                trip.pos(0, 205 * index);
                this.buildTrips.push(trip);
            }
        }
    }, {
        key: "insertDockPos",
        value: function insertDockPos(shipSet) {
            var index = shipSet.dockid;
            this.poses[index].placeShip(shipSet);
        }
    }, {
        key: "refreshAllDeskes",
        value: function refreshAllDeskes() {
            this.curDesk = 0;

            var allShips = _GameDatas2.default.instance.packShips;
            var count = allShips.length;

            for (var index = 0; index < count; index += 3) {
                var trip = this.deskTrip.create();
                trip.setShip(0, allShips[index]);
                if (++index < count) {
                    trip.setShip(1, allShips[index]);
                }
                if (++index < count) {
                    trip.setShip(2, allShips[index]);
                }
                this.desks.push(trip);
                this.deskLay.addChild(trip);
                trip.pos(0, 200 * Math.floor(index / 3));
            }

            this.curDesk = count % 3;

            if (count == 0) {
                var trip = this.deskTrip.create();
                this.desks.push(trip);
                this.deskLay.addChild(trip);
                trip.pos(0, 0);
            }
        }
    }, {
        key: "refreshAllDeskByOutShip",
        value: function refreshAllDeskByOutShip(shipSet) {
            if (shipSet.packID < 0) return;

            this.curDesk = 0;

            var allShips = _GameDatas2.default.instance.packShips;
            var count = allShips.length;
            var stIndex = shipSet.packID;

            for (var index = stIndex; index < allShips.length; index++) {
                var tripIndex = Math.floor(index / 3);
                var trip = this.desks[tripIndex];
                trip.setShip(index % 3, allShips[index]);
            }

            var maxTrip = Math.floor((count - 1) / 3) + 1;

            this.curDesk = count % 3;
            if (this.curDesk != 0) {
                var trip = this.desks[maxTrip - 1];
                trip.setShip(this.curDesk, null);
                if (this.curDesk == 1) trip.setShip(2, null);
            }

            if (this.desks.length > maxTrip) {
                for (var tindex = maxTrip; tindex < this.desks.length; tindex++) {
                    this.desks[tindex].destroy();
                }
            }

            this.desks = this.desks.slice(0, maxTrip);
        }
    }, {
        key: "insertPackShip",
        value: function insertPackShip(shipSet) {
            if (this.curDesk == 0) {
                var trip = this.deskTrip.create();
                trip.setShip(this.curDesk++, shipSet);
                this.desks.push(trip);
                this.deskLay.addChild(trip);
                trip.pos(0, 200 * (this.desks.length - 1));
            } else {
                this.desks[this.desks.length - 1].setShip(this.curDesk++, shipSet);
            }

            this.curDesk = this.curDesk % 3;
        }
    }, {
        key: "AllDesckRefreshFull",
        value: function AllDesckRefreshFull() {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.desks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var trip = _step3.value;

                    trip.refreshShow();
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: "refreshAllBuilds",
        value: function refreshAllBuilds() {
            var count = _GameDatas2.default.instance.buildCap;

            for (var index = 0; index < count; index++) {
                var trip = this.buildTrip.create();
                this.buildLay.addChild(trip);
                trip.pos(0, 205 * index);
                this.buildTrips.push(trip);
            }
        }
    }, {
        key: "buildTripCheck",
        value: function buildTripCheck() {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.buildTrips[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var brip = _step4.value;

                    brip.resultRefresh();
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: "getPosByIndex",
        value: function getPosByIndex(index) {
            return {
                x: 200 * index,
                y: index % 2 * 120
            };
        }
    }, {
        key: "changePos",
        value: function changePos(index1, index2) {
            var pos1 = this.poses[index1];
            var pos2 = this.poses[index2];

            var xy1 = { x: pos1.x, y: pos1.y };
            var xy2 = { x: pos2.x, y: pos2.y };

            pos1.posIndex = index2;
            pos2.posIndex = index1;

            this.poses[index1] = pos2;
            this.poses[index2] = pos1;

            pos1.pos(xy2.x, xy2.y);
            pos2.pos(xy1.x, xy1.y);

            pos1.backPos();
            pos2.backPos();
        }
    }, {
        key: "recollectPos",
        value: function recollectPos(pindex) {
            this.poses[pindex].placeShip(null);
        }
    }, {
        key: "refreshAllPros",
        value: function refreshAllPros(pros) {
            var index = 0;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = pros[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var proset = _step5.value;

                    var name = proset.name;
                    var proName = proset.proName;

                    var proTrip = this.proTrips.create();
                    proTrip.pos(25, 25 + index * 40);

                    this.infoPanel.addChild(proTrip);

                    proTrip.setProName(name);
                    proTrip.setProConnect(proName, proset.lenfunc);

                    this.infos.push(proTrip);

                    index++;
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }
    }, {
        key: "refreshInfoShow",
        value: function refreshInfoShow(shipset) {
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.infos[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var proTrip = _step6.value;

                    proTrip.refreshPro(shipset);
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }
        }
    }, {
        key: "showRes",
        value: function showRes(_res, ok, x, y, okCallBack) {
            var _this = this;
            this.altRes.okCallBack = function () {
                okCallBack();
                _this.altRes.visible = false;
                _this.altRes.pos(-150, -150);
                _this.cover.visible = false;
            };
            this.altRes.visible = true;

            this.altRes.setEnough(ok);

            this.altRes.setResourceShow(_res);

            x = Math.min(480, x);
            y = Math.min(660, y);

            this.altRes.pos(x, y);
            this.cover.visible = true;
        }
    }]);

    return SceneLayer;
}(Laya.Script);

exports.default = SceneLayer;

},{"../data/dock":9,"../manager/GameDatas":15}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _repeatMove = require("../components/repeatMove");

var _repeatMove2 = _interopRequireDefault(_repeatMove);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShipContainer = function (_Laya$Script) {
    _inherits(ShipContainer, _Laya$Script);

    /** @prop {name:shipPre,tips:"航行船",type:Prefab} */
    /** @prop {name:shipY,tips:"航行船Y坐标",type:Int} */

    function ShipContainer() {
        _classCallCheck(this, ShipContainer);

        var _this = _possibleConstructorReturn(this, (ShipContainer.__proto__ || Object.getPrototypeOf(ShipContainer)).call(this));

        _this.shipArr = [];
        _this.count = 0;
        _this.index = 0;
        return _this;
    }

    _createClass(ShipContainer, [{
        key: "addShip",
        value: function addShip(_shipSet) {
            var shipFab = this.shipPre.create();
            shipFab.skin = _shipSet.getIconPath();

            this.owner.addChild(shipFab);
            var moveSet = shipFab.getComponent(_repeatMove2.default);
            _shipSet.moveSet = moveSet;

            var textMap = ["SATRT", "FORWARD", "PACKIN", "BACK", "PAKCOUT"];
            for (var i = -2; i < 7; i++) {
                moveSet.setStateCallBack(i, function (ps, cs) {
                    if (_shipSet.dockPos && cs >= 0 && cs <= 4) _shipSet.dockPos.setWorkState(textMap[cs]);
                    if (cs == 6) _shipSet.dockPos.setWorkState("BATTLE");
                    _shipSet.triggerState(cs);
                });
            }

            _shipSet.setCrashCallBack(function () {
                _shipSet.dockPos.refreshState();
                shipFab.skin = _shipSet.getIconPath();
            });

            _shipSet.setRepairCallBack(function () {
                _shipSet.dockPos.refreshState();
            });

            shipFab.y = this.shipY;

            _shipSet.SetRouteIndex(this.index);
            this.shipArr.push({
                ID: this.index++,
                ship: shipFab,
                moveSet: moveSet,
                shipset: _shipSet
            });

            this.count++;
            moveSet.setBlank();
        }
    }, {
        key: "loseShip",
        value: function loseShip(_shipSet) {
            for (var i = 0; i < this.shipArr.length; i++) {
                var obj = this.shipArr[i];
                if (obj.shipset == _shipSet) {
                    this.owner.removeChild(obj.ship);

                    this.count--;
                    this.shipArr.splice(i, 1);

                    _shipSet.SetRouteIndex(-1);
                    break;
                }
            }
        }
    }, {
        key: "setAllShip",
        value: function setAllShip(arr) {
            this.owner.removeChildren();

            this.shipArr = [];
            this.count = 0;
            this.index = 0;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var ship = _step.value;

                    this.addShip(ship);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "eachConfig",
        value: function eachConfig(_func) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.shipArr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var obj = _step2.value;

                    _func(obj);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "fixIDConfig",
        value: function fixIDConfig(ID, _func) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.shipArr[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var obj = _step3.value;

                    if (obj.ID == ID) {
                        _func(obj);
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }]);

    return ShipContainer;
}(Laya.Script);

exports.default = ShipContainer;

},{"../components/repeatMove":6}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _targetSwitch = require("./targetSwitch");

var _targetSwitch2 = _interopRequireDefault(_targetSwitch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ButtonFloat = function (_Laya$Button) {
    _inherits(ButtonFloat, _Laya$Button);

    function ButtonFloat(_lev) {
        _classCallCheck(this, ButtonFloat);

        var _this = _possibleConstructorReturn(this, (ButtonFloat.__proto__ || Object.getPrototypeOf(ButtonFloat)).call(this));

        _this.rankLev = _lev;
        _this.clickCallBack = function () {};
        return _this;
    }

    _createClass(ButtonFloat, [{
        key: "onEnable",
        value: function onEnable() {
            var _this2 = this;

            this.label = "Rank:" + this.rankLev;
            this.on(Laya.Event.CLICK, this, function (event) {
                _this2.clickCallBack(_this2.rankLev, event);
            });

            this.skin = "images/UI/buttonTripInfo.png";
            this.stateNum = 2;
            this.labelColors = "#ffffff";
            this.labelSize = 16;
            /*this.strokeColors = "#000000";
            this.labelStroke = 1;*/
            this.width = 80;
            this.height = 40;

            var tarSwi = this.addComponent(_targetSwitch2.default);
            tarSwi.pos1X = this.rankLev * 80 - 30;
            tarSwi.pos1Y = -40;
            tarSwi.pos2X = this.rankLev * 80 - 30;
            tarSwi.pos2Y = 40;
            tarSwi.speed = 20;

            tarSwi.onEnable();
            tarSwi.setState(1);

            this.tarSwi = tarSwi;
        }
    }, {
        key: "setClickCallBack",
        value: function setClickCallBack(_func) {
            this.clickCallBack = _func;
        }
    }, {
        key: "switchSet",
        value: function switchSet() {
            this.tarSwi.switchTarget();
        }
    }]);

    return ButtonFloat;
}(Laya.Button);

exports.default = ButtonFloat;

},{"./targetSwitch":7}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bignumber = require("../libs/bignumber");

var _bignumber2 = _interopRequireDefault(_bignumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var State = {
    START: 0,
    FORWARD: 1,
    PACKIN: 2,
    BACK: 3,
    PACKOUT: 4,
    REPAIR: 5,
    INTERRAUPT: 6,
    NOING: -1,
    PAUSENULL: -2
};

var RepeatMove = function (_Laya$Script) {
    _inherits(RepeatMove, _Laya$Script);

    /** @prop {name:realStartX,tips:"航路开始的X坐标",type:Int} */
    /** @prop {name:realEndX,tips:"航路结束的X坐标",type:Int} */

    function RepeatMove() {
        _classCallCheck(this, RepeatMove);

        var _this = _possibleConstructorReturn(this, (RepeatMove.__proto__ || Object.getPrototypeOf(RepeatMove)).call(this));

        _this.state = State.START;
        _this.eventMap = {};
        return _this;
    }

    _createClass(RepeatMove, [{
        key: "onEnable",
        value: function onEnable() {
            this.moveSpeed = 50;
            this.packtime = 60;
            this.interProb = 0.15;
            this.lineLength = 500;

            this.safeFix = [100, 100];
            this.safeCount = 0;

            this.interBefore = State.START;

            this.moveCount = (0, _bignumber2.default)(0);

            this.updateDataWithRealLength();
        }
    }, {
        key: "updateDataWithRealLength",
        value: function updateDataWithRealLength() {
            this.realLength = this.realEndX - this.realStartX;

            var per = this.realLength / this.lineLength;
            this.moveSpeed *= per;
        }
    }, {
        key: "updateSafeLength",
        value: function updateSafeLength() {
            this.moveCount = (0, _bignumber2.default)(0);

            var safeMin = this.safeFix[0];
            var safeGap = this.safeFix[1] - this.safeFix[0];

            this.safeCount = (Math.random() * safeGap + safeMin) * this.realLength / 100;
        }
    }, {
        key: "configAllData",
        value: function configAllData(_config) {
            Object.assign(this, _config);
            this.updateDataWithRealLength();
            this.updateSafeLength();
        }
    }, {
        key: "onUpdate",
        value: function onUpdate() {
            var _this2 = this;

            if (this.state == State.START) {
                this.CheckBeforeMove();
            } else if (this.state == State.FORWARD) {
                this.moveForward();
                this.updateInterrupt();
            } else if (this.state == State.PACKIN) {
                this.changeState(State.NOING);
                Laya.timer.frameOnce(this.packtime, this, function () {
                    _this2.changeState(State.BACK);
                });
            } else if (this.state == State.BACK) {
                this.moveBack();
                this.updateInterrupt();
            } else if (this.state == State.PACKOUT) {
                this.changeState(State.NOING);
                Laya.timer.frameOnce(this.packtime, this, function () {
                    _this2.changeState(State.FORWARD);
                });
            } else if (this.state == State.INTERRAUPT) {}
        }
    }, {
        key: "CheckBeforeMove",
        value: function CheckBeforeMove() {
            this.changeState(State.FORWARD);
            this.owner.x = this.realStartX;
        }
    }, {
        key: "moveForward",
        value: function moveForward() {
            var tempSet = this.owner.x;
            this.owner.x += this.moveSpeed;
            this.owner.scaleX = 1;
            if (this.owner.x >= this.realEndX) {
                this.moveCount = this.moveCount.plus((0, _bignumber2.default)(this.realEndX - tempSet));
                this.owner.x = this.realEndX;
                this.changeState(State.PACKIN);
            } else {
                this.moveCount = this.moveCount.plus((0, _bignumber2.default)(this.moveSpeed));
            }
        }
    }, {
        key: "moveBack",
        value: function moveBack() {
            var tempSet = this.owner.x;
            this.owner.x -= this.moveSpeed;
            this.owner.scaleX = -1;
            if (this.owner.x <= this.realStartX) {
                this.moveCount = this.moveCount.plus((0, _bignumber2.default)(tempSet - this.realStartX));
                this.owner.x = this.realStartX;
                this.changeState(State.PACKOUT);
            } else {
                this.moveCount = this.moveCount.plus((0, _bignumber2.default)(this.moveSpeed));
            }
        }
    }, {
        key: "updateInterrupt",
        value: function updateInterrupt() {
            if (this.state != State.PACKOUT && this.state != State.PACKIN) {
                if (this.moveCount.gt(this.safeCount)) {
                    this.interBefore = this.state;
                    this.changeState(State.INTERRAUPT);
                    this.updateSafeLength();
                }
            }
        }
    }, {
        key: "reBackInter",
        value: function reBackInter() {
            this.changeState(this.interBefore);
        }
    }, {
        key: "changeState",
        value: function changeState(_state) {
            var perState = this.state;
            this.state = _state;
            if (this.eventMap[_state]) {
                this.eventMap[_state](perState, _state);
            }
        }
    }, {
        key: "setStateCallBack",
        value: function setStateCallBack(state, _func) {
            this.eventMap[state] = _func;
        }
    }, {
        key: "setBlank",
        value: function setBlank() {
            this.changeState(State.PAUSENULL);
            this.owner.visible = false;
        }
    }, {
        key: "startMove",
        value: function startMove() {
            this.changeState(State.START);

            this.owner.visible = true;
            this.owner.x = this.realStartX;
            this.owner.scaleX = 1;
        }
    }]);

    return RepeatMove;
}(Laya.Script);

exports.default = RepeatMove;

},{"../libs/bignumber":13}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TargetSwitch = function (_Laya$Script) {
    _inherits(TargetSwitch, _Laya$Script);

    /** @prop {name:pos1X,tips:"位置1X坐标",type:Int} */
    /** @prop {name:pos1Y,tips:"位置1Y坐标",type:Int} */
    /** @prop {name:pos2X,tips:"位置2X坐标",type:Int} */
    /** @prop {name:pos2Y,tips:"位置2Y坐标",type:Int} */
    /** @prop {name:speed,tips:"移动速度",type:Int} */

    function TargetSwitch() {
        _classCallCheck(this, TargetSwitch);

        var _this = _possibleConstructorReturn(this, (TargetSwitch.__proto__ || Object.getPrototypeOf(TargetSwitch)).call(this));

        _this.state = 1;
        return _this;
    }

    _createClass(TargetSwitch, [{
        key: "onEnable",
        value: function onEnable() {
            this.pos1 = new Laya.Point(this.pos1X, this.pos1Y);
            this.pos2 = new Laya.Point(this.pos2X, this.pos2Y);

            var dis1 = this.pos1.distance(this.owner.x, this.owner.y);
            var dis2 = this.pos2.distance(this.owner.x, this.owner.y);

            this.state = dis2 > dis1 ? 1 : 2;
        }
    }, {
        key: "onUpdate",
        value: function onUpdate() {
            if (this.state == 1) {
                this.paceToTarget(this.pos1);
            } else if (this.state == 2) {
                this.paceToTarget(this.pos2);
            }
        }
    }, {
        key: "paceToTarget",
        value: function paceToTarget(point) {
            var curposX = this.owner.x;
            var curposY = this.owner.y;

            if (point.distance(curposX, curposY) < 5) return;

            if (point.distance(curposX, curposY) < this.speed) {
                this.owner.pos(point.x, point.y);
            } else {
                var offPoint = new Laya.Point(point.x - curposX, point.y - curposY);
                offPoint.normalize();
                this.owner.pos(curposX + offPoint.x * this.speed, curposY + offPoint.y * this.speed);
            }
        }
    }, {
        key: "switchTarget",
        value: function switchTarget() {
            this.setState(3 - this.state);
        }
    }, {
        key: "setState",
        value: function setState(_state) {
            this.state = _state;
        }
    }]);

    return TargetSwitch;
}(Laya.Script);

exports.default = TargetSwitch;

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ship = require('../data/ship');

var _ship2 = _interopRequireDefault(_ship);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BuildList = function () {
    function BuildList(_rank) {
        _classCallCheck(this, BuildList);

        this.rank = _rank - 1;
        this.stTime = new Date();
        this.bid = this.randomCode();

        this.initBuildMap();
    }

    _createClass(BuildList, [{
        key: 'initBuildMap',
        value: function initBuildMap() {
            this.buildMap = [{
                need: [500, 500, 500, 0],
                tCost: 30
            }, {
                need: [6000, 6000, 6000, 50],
                tCost: 180
            }, {
                need: ['700000', '700000', '700000', 400],
                tCost: 1080
            }];
        }
    }, {
        key: 'randomCode',
        value: function randomCode() {
            return ('' + Math.random()).slice(2, -1);
        }
    }, {
        key: 'getTimeLeft',
        value: function getTimeLeft() {
            var tCost = this.buildMap[this.rank].tCost;
            var now = new Date();
            var timePass = (now - this.stTime) / 1000;
            return tCost - timePass;
        }
    }, {
        key: 'checkOK',
        value: function checkOK() {
            return this.getTimeLeft() <= 0;
        }
    }, {
        key: 'getBuildResult',
        value: function getBuildResult() {
            return new _ship2.default(0, -1);
        }
    }]);

    return BuildList;
}();

exports.default = BuildList;

},{"../data/ship":12}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dock = function () {
    function Dock(lvl) {
        _classCallCheck(this, Dock);

        this.shipChangeCallBack = function () {};

        this.initDockMap();
        this.SetLevel(lvl);
    }

    _createClass(Dock, [{
        key: "initDockMap",
        value: function initDockMap() {
            this.proMap = [{ cap: 4, level: [2000, 2000, 2000, 100] }, { cap: 5, level: [200000, 200000, 200000, 1000] }, { cap: 6, level: [0, 0, 0, 0] }];
            this.dockSet = {};
        }
    }, {
        key: "setDockCallBack",
        value: function setDockCallBack(_func) {
            this.shipChangeCallBack = _func;
        }
    }, {
        key: "LevelUP",
        value: function LevelUP() {
            this.SetLevel(this.level + 1);
        }
    }, {
        key: "SetLevel",
        value: function SetLevel(_lvl) {
            this.level = _lvl;
            var curPro = this.proMap[this.level];
            this.shipCap = curPro.cap;
            this.levelUp = curPro.level;
        }
    }, {
        key: "GetShipCap",
        value: function GetShipCap() {
            return this.shipCap;
        }
    }, {
        key: "GetShipSet",
        value: function GetShipSet(_index) {
            if (this.dockSet.hasOwnProperty(_index)) {
                return this.dockSet[_index];
            } else {
                return null;
            }
        }
    }, {
        key: "outShip",
        value: function outShip(_index) {
            this.shipChangeCallBack("busy", _index);
        }
    }, {
        key: "dropShip",
        value: function dropShip(_index) {
            this.shipChangeCallBack("resume", _index);
        }
    }]);

    return Dock;
}();

exports.default = Dock;

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bignumber = require("../libs/bignumber.js");

var _bignumber2 = _interopRequireDefault(_bignumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Resource = function () {
    function Resource(_arr) {
        var _this = this;

        _classCallCheck(this, Resource);

        var arr = _arr ? _arr : [0, 0, 0, 0];
        this.resNum = {
            oil: new _bignumber2.default(arr[0]),
            ammo: new _bignumber2.default(arr[1]),
            steel: new _bignumber2.default(arr[2]),
            Al: new _bignumber2.default(arr[3])
        };
        Object.assign(this, this.resNum);
        this.changeCallBackMap = {};
        this.changeCallBack = function (res) {
            for (var key in _this.changeCallBackMap) {
                if (_this.changeCallBackMap.hasOwnProperty(key) && _this.changeCallBackMap[key]) {
                    _this.changeCallBackMap[key](res);
                }
            }
        };
    }

    _createClass(Resource, [{
        key: "randomResouce",
        value: function randomResouce(maxArr, capSet) {
            this.resNum.oil = (0, _bignumber2.default)(maxArr[0]).times(Math.random());
            this.resNum.ammo = (0, _bignumber2.default)(maxArr[1]).times(Math.random());
            this.resNum.steel = (0, _bignumber2.default)(maxArr[2]).times(Math.random());
            this.resNum.Al = (0, _bignumber2.default)(maxArr[3]).times(Math.random());

            var sum = this.resNum.oil.plus(this.resNum.ammo).plus(this.resNum.steel).plus(this.resNum.Al);

            var cap = (0, _bignumber2.default)(capSet);
            if (sum.gt(cap)) {
                var fix = cap.div(sum);
                this.resNum.oil = this.resNum.oil.times(fix);
                this.resNum.ammo = this.resNum.ammo.times(fix);
                this.resNum.steel = this.resNum.steel.times(fix);
                this.resNum.Al = this.resNum.Al.times(fix);
            }
        }
    }, {
        key: "getResource",
        value: function getResource(name) {
            if (Object.keys(this.resNum).index(name) >= 0) return this.resNum[index];else return new _bignumber2.default(0);
        }
    }, {
        key: "buildObj",
        value: function buildObj() {
            var res = {};
            for (var key in this.resNum) {
                if (this.resNum.hasOwnProperty(key)) {
                    var number = (0, _bignumber2.default)(this.resNum[key]);
                    if (!number.eq(0)) res[key] = number;
                }
            }
            return res;
        }
    }, {
        key: "printDebug",
        value: function printDebug() {
            console.log("Resource:[oil]:" + this.resNum.oil.toUnit() + "\n[ammo]:" + this.resNum.ammo.toUnit() + "\n[steel]:" + this.resNum.steel.toUnit() + "\n[Al]:" + this.resNum.Al.toUnit() + "\n");
        }
    }, {
        key: "costRes",
        value: function costRes(cost) {
            for (var key in this.resNum) {
                var changeNumber = (0, _bignumber2.default)(cost[key]);
                if (this.resNum.hasOwnProperty(key)) {
                    this.resNum[key] = this.resNum[key].minus(changeNumber);
                }
            }
            this.changeCallBack.call(this, this.resNum);
        }
    }, {
        key: "resourceChange",
        value: function resourceChange(change) {
            for (var key in this.resNum) {
                var changeNumber = (0, _bignumber2.default)(change[key]);
                if (this.resNum.hasOwnProperty(key)) {
                    this.resNum[key] = this.resNum[key].plus(changeNumber);
                }
            }
            this.changeCallBack.call(this, this.resNum);
        }
    }, {
        key: "checkResource",
        value: function checkResource(need) {
            for (var key in this.resNum) {
                var mapNumber = (0, _bignumber2.default)(need[key]);
                if (this.resNum.hasOwnProperty(key) && this.resNum[key].lt(mapNumber)) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "addChangeCallBack",
        value: function addChangeCallBack(func, key) {
            this.changeCallBackMap[key] = func;
        }
    }]);

    return Resource;
}();

exports.default = Resource;

},{"../libs/bignumber.js":13}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Route = function () {
    function Route(id, lvl) {
        _classCallCheck(this, Route);

        this.initRouteMap();

        this.shipOn = [];
        this.setCurrentRoute(id, lvl);
        this.placeCallBack = function () {};
    }

    _createClass(Route, [{
        key: "initRouteMap",
        value: function initRouteMap() {
            this.propMap = [{
                name: "First Route",
                distance: 10000,
                backPath: "images/RouteBG.png",
                resource: [[150, 20, 200, 1], [200, 50, 250, 2], [220, 100, 300, 5]],
                safeFix: [[145, 823], [200, 900], [400, 1200]],
                safeMax: [50, 40, 30],
                maxShip: [2, 3, 4],
                level: [[1000, 500, 1000, 10], ['60000', 1400, '75000', 250], [0, 0, 0, 0]],
                unlock: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                maxLevel: 3
            }, {
                name: "Danger Route",
                distance: [50000],
                backPath: "images/RouteBG2.png",
                resource: [[1000, 5000, 3500, 40]],
                safeFix: [[122, 577]],
                safeMax: [200],
                maxShip: [2],
                unlock: [['80000', '80000', '80000', '1000']],
                maxLevel: 1
            }, {
                name: "Last Route",
                distance: [200000],
                backPath: ["images/RouteBG3.png"],
                resource: [[6000, 4200, 13000, 600]],
                safeFix: [[98, 324]],
                safeMax: [400],
                maxShip: [2],
                maxLevel: 1
            }];
        }
    }, {
        key: "setCurrentRoute",
        value: function setCurrentRoute(_id, _lvl) {
            this.routeID = _id;
            this.curLevel = _lvl;

            var dataAllLevel = this.propMap[_id];
            this.curData = {};

            for (var key in dataAllLevel) {
                if (dataAllLevel.hasOwnProperty(key)) {
                    var value = dataAllLevel[key];
                    if (Object.prototype.toString.call(value) === "[object Array]") {
                        this.curData[key] = value[this.curLevel];
                    } else {
                        this.curData[key] = value;
                    }
                }
            }
        }
    }, {
        key: "levelUP",
        value: function levelUP() {
            this.setCurrentRoute(this.routeID, this.curLevel + 1);
        }
    }, {
        key: "isMaxLevel",
        value: function isMaxLevel() {
            return this.curLevel >= this.curData.maxLevel - 1;
        }
    }, {
        key: "setPlaceCallBack",
        value: function setPlaceCallBack(_func) {
            this.placeCallBack = _func;
        }
    }, {
        key: "placeShip",
        value: function placeShip(_shipSet) {
            this.shipOn.push(_shipSet);
            _shipSet.placeOnRoute(this);

            this.placeCallBack(_shipSet);
        }
    }, {
        key: "shipFull",
        value: function shipFull() {
            return this.shipOn.length >= this.curData.maxShip;
        }
    }, {
        key: "shipCount",
        value: function shipCount() {
            return this.shipOn.length;
        }
    }, {
        key: "loseShip",
        value: function loseShip(_shipSet) {
            for (var i = 0; i < this.shipOn.length; i++) {
                if (this.shipOn[i] == _shipSet) {
                    this.shipOn.splice(i, 1);
                    break;
                }
            }
            this.placeCallBack(null, _shipSet);
        }
    }, {
        key: "getDistance",
        value: function getDistance() {
            return this.curData.distance;
        }
    }]);

    return Route;
}();

exports.default = Route;

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Ship = function () {
    function Ship(_id, _cid) {
        _classCallCheck(this, Ship);

        this.initShipMap();

        //this.shipID = _id;      //船的标记ID
        //this.CagID = _cid;      //玩家船的获得ID

        this.insData = {}; //当前实例的数据，包括升级等数据
        this.data = {}; //船本身的数据

        this.stateTriggerMap = {};
        this.selfTrigger = {};

        this.routeOn = null;
        this.routeIndex = -1;

        this.dockPos = null;

        this.curstate = -1; //IDLE
        this.crash = false;

        this.crashCallBack = function () {};
        this.repairCallBack = function () {};

        this.SetShipID(_id);
        this.SetShipCagID(_cid);
    }

    _createClass(Ship, [{
        key: "initShipMap",
        value: function initShipMap() {
            this.ShipMap = [{
                name: "AAA",
                iconPath: "images/ships/Ship_1_a.png",
                crashIconPath: "images/ships/Ship_1_b.png",
                baseSpeed: [50, 130],
                baseLoad: [60, 50],
                maxcap: [50, 80],
                battle: [20, 25],
                repair: [10, 8],
                autoRe: [false, true],
                level: [[10, 10, 10, 0], [120, 120, 120, 10]],
                desc: "简介123456YUE",
                rank: 0,
                rankWight: 250,
                lvlim: 2
            }, {
                name: "BBB",
                iconPath: "images/ships/Ship_2_a.png",
                crashIconPath: "images/ships/Ship_2_b.png",
                baseSpeed: [80, 200, 220],
                baseLoad: [120, 100, 80],
                maxcap: [150, 200, 220],
                battle: [25, 30, 50],
                repair: [20, 10, 12],
                autoRe: [true, true, true],
                desc: "第二个船的简介123456Acekasd",
                rank: 0,
                rankWight: 150,
                lvlim: 3
            }];
        }
    }, {
        key: "SetShipID",
        value: function SetShipID(_id) {
            this.shipID = _id;
            this.data = this.ShipMap[_id];
        }
    }, {
        key: "GetJobText",
        value: function GetJobText() {
            if (this.dockid < 0) {
                return "仓库中存放……"; //显然不会出现在信息中
            } else if (this.routeOn != null) {
                if (this.crash) {
                    return "\u822A\u9053" + this.routeOn.curData.name + " \u53D7\u635F\u8FD4\u822A\u4E2D";
                } else {
                    return "\u822A\u9053" + this.routeOn.curData.name + " \u6B63\u5E38\u5DE5\u4F5C\u4E2D";
                }
            } else {
                if (this.crash && !this.repair) {
                    return "\u8239\u575E\u4E2D\u7B49\u5F85\u4FEE\u7406";
                } else if (this.repair) {
                    return "\u4FEE\u7406\u4E2D";
                } else {
                    return "\u8239\u575E\u4E2D\u7B49\u5F85\u4EFB\u52A1";
                }
            }
        }
    }, {
        key: "SetShipCagID",
        value: function SetShipCagID(_cid) {
            if (_cid < 0) return;

            this.CagID = _cid;
            this.insData = _GameDatas2.default.instance.getCagShip(_cid);
            this.SetShipID(this.insData.shipID);

            Object.assign(this, this.insData);

            this.curData = {};
            for (var key in this.data) {
                if (this.data.hasOwnProperty(key)) {
                    if (Object.prototype.toString.call(this.data[key]) === "[object Array]") {
                        this.curData[key] = this.data[key][this.insData.level];
                    } else {
                        this.curData[key] = this.data[key];
                    }
                }
            }

            this.updateBattleCallBack();
        }
    }, {
        key: "getCurrentLevel",
        value: function getCurrentLevel() {
            return this.insData.level + 1;
        }
    }, {
        key: "getCurrentLevelText",
        value: function getCurrentLevelText() {
            if (this.getCurrentLevel() < this.curData.lvlim) {
                return "" + (this.insData.level + 1);
            } else {
                return 'Max';
            }
        }
    }, {
        key: "initSelfCallBack",
        value: function initSelfCallBack() {
            this.selfTrigger = {};
        }
    }, {
        key: "setCrashCallBack",
        value: function setCrashCallBack(_func) {
            this.crashCallBack = _func;
        }
    }, {
        key: "setRepairCallBack",
        value: function setRepairCallBack(_func) {
            this.repairCallBack = _func;
        }
    }, {
        key: "getData",
        value: function getData(key) {
            return this.curData[key];
        }
    }, {
        key: "getNextLvlData",
        value: function getNextLvlData(key) {
            var array = this.data[key];
            var curLvl = this.getCurrentLevel();
            if (array) {
                if (Object.prototype.toString.call(array) === "[object Array]") {
                    if (array.length > curLvl) return array[curLvl];
                    return array[curLvl - 1];
                }
            }
            return null;
        }
    }, {
        key: "getIconPath",
        value: function getIconPath() {
            return this.crash ? this.curData.crashIconPath : this.curData.iconPath;
        }
    }, {
        key: "placeOnRoute",
        value: function placeOnRoute(_route) {
            this.routeOn = _route;
            this.routeBeforeCrash = null;

            this.initSelfCallBack();
            this.updateBattleCallBack();
        }
    }, {
        key: "setIdle",
        value: function setIdle() {
            if (this.routeOn) {
                this.routeOn.loseShip(this);
            }

            if (this.dockPos) this.dockPos.resumeBusy();

            if (this.crash && this.curData.autoRe) {
                this.StartRepair();
                this.routeBeforeCrash = this.routeOn;
            }

            this.routeOn = null;
            this.triggerState(-1);
        }
    }, {
        key: "isIdle",
        value: function isIdle() {
            return this.routeOn == null;
        }
    }, {
        key: "SetRouteIndex",
        value: function SetRouteIndex(_index) {
            this.routeIndex = _index;
        }
    }, {
        key: "setStateTrigger",
        value: function setStateTrigger(sstate, obj, _func) {
            var build = {
                obj: obj,
                func: _func
            };

            if (!this.stateTriggerMap[sstate]) {
                this.stateTriggerMap[sstate] = [];
            }

            this.stateTriggerMap[sstate].push(build);
        }
    }, {
        key: "setSelfTrigger",
        value: function setSelfTrigger(sstate, _func) {
            this.selfTrigger[sstate] = _func;
        }
    }, {
        key: "triggerState",
        value: function triggerState(sstate) {

            var kickList = [];
            var allCallBack = this.stateTriggerMap[sstate];

            if (allCallBack) {

                for (var i = 0; i < allCallBack.length; i++) {
                    var callBack = allCallBack[i];
                    if (callBack.obj) {
                        var res = callBack.func.call(callBack.obj, this.curstate, this);

                        if (res) kickList.push(i);
                    } else {
                        kickList.push(i);
                    }
                }

                kickList.reverse();
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = kickList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var index = _step.value;

                        this.stateTriggerMap[sstate].splice(index, 1);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }

            if (this.selfTrigger[sstate]) {
                this.selfTrigger[sstate].call(this);
            }

            this.curstate = sstate;
        }
    }, {
        key: "sendBack",
        value: function sendBack() {
            var _this = this;

            if (this.curstate == 1 || this.curstate == 2) {
                this.moveSet.changeState(3);
                this.setSelfTrigger(4, function () {
                    _this.setIdle();
                });

                if (this.dockPos) this.dockPos.setSendBack();
            } else if (this.curstate == 3 || this.curstate == 4) {
                this.moveSet.changeState(this.curstate);
                this.setSelfTrigger(1, function () {
                    _this.setIdle();
                });

                if (this.dockPos) this.dockPos.setSendBack();
            }
        }

        /* Battle Wait */

    }, {
        key: "updateBattleCallBack",
        value: function updateBattleCallBack() {
            var _this2 = this;

            this.setSelfTrigger(6, function () {
                var tempState = _this2.curstate;
                Laya.timer.frameOnce(120, _this2, function () {
                    _this2.curstate = tempState;

                    if (Math.random() * _this2.routeOn.curData.safeMax > _this2.curData.battle) {
                        _this2.setCrash();
                    } else {
                        _this2.moveSet.reBackInter();
                    }
                });
            });
        }
    }, {
        key: "setCrash",
        value: function setCrash() {
            this.crash = true;

            this.crashCallBack();

            if (this.dockPos) this.dockPos.setCrashBack();
            this.sendBack();
        }
    }, {
        key: "StartRepair",
        value: function StartRepair() {
            if (!this.crash) return;

            this.repair = true;
            this.repairStart = new Date();
            this.repairCallBack();
        }
    }, {
        key: "repairCompelete",
        value: function repairCompelete() {
            this.repair = false;
            this.repairStart = null;
            this.crash = false;

            if (this.curData.autoRe && this.routeBeforeCrash) {
                this.routeBeforeCrash.placeShip(this);

                if (this.dockPos) this.dockPos.setBusy();
            }

            this.repairCallBack();
        }
    }]);

    return Ship;
}();

exports.default = Ship;

},{"../manager/GameDatas":15}],13:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (globalObject) {
  'use strict';

  /*
   *      bignumber.js v8.1.1
   *      A JavaScript library for arbitrary-precision arithmetic.
   *      https://github.com/MikeMcl/bignumber.js
   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
   *      MIT Licensed.
   *
   *      BigNumber.prototype methods     |  BigNumber methods
   *                                      |
   *      absoluteValue            abs    |  clone
   *      comparedTo                      |  config               set
   *      decimalPlaces            dp     |      DECIMAL_PLACES
   *      dividedBy                div    |      ROUNDING_MODE
   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
   *      exponentiatedBy          pow    |      RANGE
   *      integerValue                    |      CRYPTO
   *      isEqualTo                eq     |      MODULO_MODE
   *      isFinite                        |      POW_PRECISION
   *      isGreaterThan            gt     |      FORMAT
   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
   *      isInteger                       |  isBigNumber
   *      isLessThan               lt     |  maximum              max
   *      isLessThanOrEqualTo      lte    |  minimum              min
   *      isNaN                           |  random
   *      isNegative                      |  sum
   *      isPositive                      |
   *      isZero                          |
   *      minus                           |
   *      modulo                   mod    |
   *      multipliedBy             times  |
   *      negated                         |
   *      plus                            |
   *      precision                sd     |
   *      shiftedBy                       |
   *      squareRoot               sqrt   |
   *      toExponential                   |
   *      toFixed                         |
   *      toFormat                        |
   *      toFraction                      |
   *      toJSON                          |
   *      toNumber                        |
   *      toPrecision                     |
   *      toString                        |
   *      valueOf                         |
   *
   */

  var BigNumber,
      isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
      hasSymbol = typeof Symbol == 'function' && _typeof(Symbol.iterator) == 'symbol',
      mathceil = Math.ceil,
      mathfloor = Math.floor,
      bignumberError = '[BigNumber Error] ',
      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',
      BASE = 1e14,
      LOG_BASE = 14,
      MAX_SAFE_INTEGER = 0x1fffffffffffff,
      // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
      SQRT_BASE = 1e7,


  // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9; // 0 to MAX_INT32


  /*
   * Create and return a BigNumber constructor.
   */
  function clone(configObject) {
    var div,
        convertBase,
        parseNumeric,
        P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
        ONE = new BigNumber(1),


    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.

    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,
        // 0 to MAX

    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,
        // 0 to 8

    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,
        // 0 to -MAX

    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,
        // 0 to MAX

    // RANGE : [MIN_EXP, MAX_EXP]

    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,
        // -1 to -MAX

    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,
        // 1 to MAX

    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,
        // true or false

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,
        // 0 to 9

    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,
        // 0 to MAX

    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      prefix: '',
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ',',
      decimalSeparator: '.',
      fractionGroupSize: 0,
      fractionGroupSeparator: '\xA0', // non-breaking space
      suffix: ''
    },


    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    // '-', '.', whitespace, or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';

    //------------------------------------------------------------------------------------------


    // CONSTRUCTOR


    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */
    function BigNumber(v, b) {
      var alphabet,
          c,
          caseChanged,
          e,
          i,
          isNum,
          len,
          str,
          x = this;

      // Enable constructor call without `new`.
      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {

        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {

          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

          // Fast path for integers, where n < 2147483648 (2**31).
          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++) {}

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {

          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }
      } else {

        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base');

        // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.
        if (b == 10) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {

          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error(tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0;

        // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {

              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {

              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        }

        // Prevent later check for length on converted number.
        isNum = false;
        str = convertBase(str, b, 10, x.s);

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++) {}

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(--len) === 48;) {}

      if (str = str.slice(i, ++len)) {
        len -= i;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error(tooManyDigits + x.s * v);
        }

        // Overflow?
        if ((e = e - i - 1) > MAX_EXP) {

          // Infinity.
          x.c = x.e = null;

          // Underflow?
        } else if (e < MIN_EXP) {

          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE; // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0') {}
          x.c.push(+str);
        }
      } else {

        // Zero.
        x.c = [x.e = 0];
      }
    }

    // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;

    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;

    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {

        if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object') {

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error(bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          }

          // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'
          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error(bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error(bignumberError + p + ' not true or false: ' + v);
            }
          }

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }

          // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'
          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);
          }

          // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'
          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p];

            // Disallow if only one character,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.
            if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
              ALPHABET = v;
            } else {
              throw Error(bignumberError + p + ' invalid: ' + v);
            }
          }
        } else {

          // '[BigNumber Error] Object expected: {v}'
          throw Error(bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };

    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */
    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;

      var i,
          n,
          c = v.c,
          e = v.e,
          s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {

        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }

          // Calculate number of digits that c[0] should have, based on the exponent.
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;

          // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
          if (String(c[0]).length == i) {

            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }

            // Last element cannot be zero, unless it is the only element.
            if (n !== 0) return true;
          }
        }

        // Infinity/NaN
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error(bignumberError + 'Invalid BigNumber: ' + v);
    };

    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };

    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };

    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
    BigNumber.random = function () {
      var pow2_53 = 0x20000000000000;

      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
        return mathfloor(Math.random() * pow2_53);
      } : function () {
        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
      };

      return function (dp) {
        var a,
            b,
            e,
            k,
            v,
            i = 0,
            c = [],
            rand = new BigNumber(ONE);

        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);

        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {

          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {

            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {

              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

              // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {

                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }
            i = k / 2;

            // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {

            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {

              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {

                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + 'crypto unavailable');
          }
        }

        // Use Math.random.
        if (!CRYPTO) {

          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE;

        // Convert trailing digits to zeros according to dp.
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        }

        // Remove trailing elements which are zero.
        for (; c[i] === 0; c.pop(), i--) {}

        // Zero?
        if (i < 0) {
          c = [e = 0];
        } else {

          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) {}

          // Count the digits of the first element of c to determine leading zeros, and...
          for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {}

          // adjust the exponent accordingly.
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    }();

    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.sum = function () {
      var i = 1,
          args = arguments,
          sum = new BigNumber(args[0]);
      for (; i < args.length;) {
        sum = sum.plus(args[i++]);
      }return sum;
    };

    // PRIVATE FUNCTIONS


    // Called by BigNumber and BigNumber.prototype.toString.
    convertBase = function () {
      var decimal = '0123456789';

      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {}

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }

      // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.
      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet,
            d,
            e,
            k,
            r,
            x,
            xc,
            y,
            i = str.indexOf('.'),
            dp = DECIMAL_PLACES,
            rm = ROUNDING_MODE;

        // Non-integer.
        if (i >= 0) {
          k = POW_PRECISION;

          // Unlimited precision.
          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;

          // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
          y.e = y.c.length;
        }

        // Convert the number as integer.

        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));

        // xc now represents str as an integer and converted to baseOut. e is the exponent.
        e = k = xc.length;

        // Remove trailing zeros.
        for (; xc[--k] == 0; xc.pop()) {}

        // Zero?
        if (!xc[0]) return alphabet.charAt(0);

        // Does str represent an integer? If so, no need for the division.
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;

          // The sign is needed for correct rounding.
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }

        // xc now represents str converted to baseOut.

        // THe index of the rounding digit.
        d = e + dp + 1;

        // The rounding digit: the digit to the right of the digit that may be rounded up.
        i = xc[d];

        // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;

        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));

        // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.
        if (d < 1 || !xc[0]) {

          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {

          // Truncate xc to the required number of decimal places.
          xc.length = d;

          // Round up?
          if (r) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }

          // Determine trailing zeros.
          for (k = xc.length; !xc[--k];) {}

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) {}

          // Add leading zeros, decimal point and trailing zeros as required.
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }

        // The caller will add the sign.
        return str;
      };
    }();

    // Perform division in the specified base. Called by div and convertBase.
    div = function () {

      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m,
            temp,
            xlo,
            xhi,
            carry = 0,
            i = x.length,
            klo = k % SQRT_BASE,
            khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {

          for (i = cmp = 0; i < aL; i++) {

            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1; a.splice(0, 1)) {}
      }

      // x: dividend, y: divisor.
      return function (x, y, dp, rm, base) {
        var cmp,
            e,
            i,
            more,
            n,
            prod,
            prodL,
            q,
            qc,
            rem,
            remL,
            rem0,
            xi,
            xL,
            yc0,
            yL,
            yz,
            s = x.s == y.s ? 1 : -1,
            xc = x.c,
            yc = y.c;

        // Either NaN, Infinity or 0?
        if (!xc || !xc[0] || !yc || !yc[0]) {

          return new BigNumber(

          // Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }

        // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
        for (i = 0; yc[i] == (xc[i] || 0); i++) {}

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;

          // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1));

          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL; rem[remL++] = 0) {}
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0;

            // Compare divisor and remainder.
            cmp = compare(yc, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, n.

              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // n is how many times the divisor goes into the current remainder.
              n = mathfloor(rem0 / yc0);

              //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {

                // n may be > base only when base is 3.
                if (n >= base) n = base - 1;

                // product = divisor * trial digit.
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.
                while (compare(prod, rem, prodL, remL) == 1) {
                  n--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {

                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {

                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                }

                // product = divisor
                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);
              remL = rem.length;

              // If product was < remainder.
              if (cmp == -1) {

                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0

            // Add the next digit, n, to the result array.
            qc[i++] = n;

            // Update the remainder.
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null;

          // Leading zero?
          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {

          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {}

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

          // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    }();

    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;

      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);

      if (!n.c) return n.toString();

      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm);

        // n.e may have changed if the value was rounded up.
        e = n.e;

        str = coeffToString(n.c);
        len = str.length;

        // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.

        // Exponential notation.
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

          // Append zeros?
          for (; len < i; str += '0', len++) {}
          str = toExponential(str, e);

          // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0');

          // Append zeros?
          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0') {}
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += '.';
              for (; i--; str += '0') {}
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    }

    // Handle BigNumber.max and BigNumber.min.
    function maxOrMin(args, method) {
      var n,
          i = 1,
          m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]);

        // If any number is NaN, return NaN.
        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }

    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
    function normalise(n, c, e) {
      var i = 1,
          j = c.length;

      // Remove trailing zeros.
      for (; !c[--j]; c.pop()) {}

      // Calculate the base 10 exponent. First get the number of digits of c[0].
      for (j = c[0]; j >= 10; j /= 10, i++) {}

      // Overflow?
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

        // Infinity.
        n.c = n.e = null;

        // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    }

    // Handle values that fail the validity test in BigNumber.
    parseNumeric = function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
          dotAfter = /^([^.]+)\.$/,
          dotBefore = /^\.([^.]+)$/,
          isInfinityOrNaN = /^-?(Infinity|NaN)$/,
          whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

      return function (x, str, isNum, b) {
        var base,
            s = isNum ? str : str.replace(whitespaceOrPlus, '');

        // No exception on ±Infinity or NaN.
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {

            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b;

              // E.g. '1.' to '1', '.1' to '0.1'
              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          }

          // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'
          if (BigNumber.DEBUG) {
            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          }

          // NaN
          x.s = null;
        }

        x.c = x.e = null;
      };
    }();

    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
    function round(x, sd, rm, r) {
      var d,
          i,
          j,
          k,
          n,
          ni,
          rd,
          xc = x.c,
          pows10 = POWS_TEN;

      // if x is not Infinity or NaN...
      if (xc) {

        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {

          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {}
          i = sd - d;

          // If the rounding digit is in the first element of xc...
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];

            // Get the rounding digit at index j of n.
            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {

              if (r) {

                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0)) {}
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];

              // Get the number of digits of n.
              for (d = 1; k >= 10; k /= 10, d++) {}

              // Get the index of rd within n.
              i %= LOG_BASE;

              // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.
              j = i - LOG_BASE + d;

              // Get the rounding digit at index j of n.
              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 ||

          // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {

              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }

          // Round up?
          if (r) {

            for (;;) {

              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {

                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {}
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++) {}

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xc.length; xc[--i] === 0; xc.pop()) {}
        }

        // Overflow? Infinity.
        if (x.e > MAX_EXP) {
          x.c = x.e = null;

          // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }

    function valueOf(n) {
      var str,
          e = n.e;

      if (e === null) return n.toString();

      str = coeffToString(n.c);

      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');

      return n.s < 0 ? '-' + str : str;
    }

    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };

    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };

    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.decimalPlaces = P.dp = function (dp, rm) {
      var c,
          n,
          v,
          x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);

        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last number.
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {}
      if (n < 0) n = 0;

      return n;
    };

    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };

    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };

    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
    P.exponentiatedBy = P.pow = function (n, m) {
      var half,
          isModExp,
          i,
          k,
          more,
          nIsBig,
          nIsNeg,
          nIsOdd,
          y,
          x = this;

      n = new BigNumber(n);

      // Allow NaN and ±Infinity, but not other non-integers.
      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m);

      // Exponent of MAX_SAFE_INTEGER is 15.
      nIsBig = n.e > 14;

      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {

        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

        if (isModExp) x = x.mod(m);

        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
      // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
      // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0;

        // If x >= 1, k = ±Infinity.
        if (x.e > -1) k = 1 / k;

        // If n is negative return ±0, else return ±Infinity.
        return new BigNumber(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {

        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE);

      // Performs 54 loop iterations for n of 9007199254740991.
      for (;;) {

        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);

      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };

    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };

    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };

    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
    P.isFinite = function () {
      return !!this.c;
    };

    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };

    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
    };

    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };

    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };

    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };

    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
    P.isNaN = function () {
      return !this.s;
    };

    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
    P.isNegative = function () {
      return this.s < 0;
    };

    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
    P.isPositive = function () {
      return this.s > 0;
    };

    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };

    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
    P.minus = function (y, b) {
      var i,
          j,
          t,
          xLTy,
          x = this,
          a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
          ye = y.e / LOG_BASE,
          xc = x.c,
          yc = y.c;

      if (!xe || !ye) {

        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

        // Either zero?
        if (!xc[0] || !yc[0]) {

          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Determine which is the bigger number.
      if (a = xe - ye) {

        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse();

        // Prepend zeros to equalise exponents.
        for (b = a; b--; t.push(0)) {}
        t.reverse();
      } else {

        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {

          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }

      // x < y? Point xc to the array of the bigger number.
      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

      b = (j = yc.length) - (i = xc.length);

      // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
      if (b > 0) for (; b--; xc[i++] = 0) {}
      b = BASE - 1;

      // Subtract yc from xc.
      for (; j > a;) {

        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b) {}
          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      }

      // Remove leading zeros and adjust exponent accordingly.
      for (; xc[0] == 0; xc.splice(0, 1), --ye) {}

      // Zero?
      if (!xc[0]) {

        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }

      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.
      return normalise(y, xc, ye);
    };

    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
    P.modulo = P.mod = function (y, b) {
      var q,
          s,
          x = this;

      y = new BigNumber(y, b);

      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN);

        // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y));

      // To match JavaScript %, ensure sign of zero is sign of dividend.
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

      return y;
    };

    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
    P.multipliedBy = P.times = function (y, b) {
      var c,
          e,
          i,
          j,
          k,
          m,
          xcL,
          xlo,
          xhi,
          ycL,
          ylo,
          yhi,
          zc,
          base,
          sqrtBase,
          x = this,
          xc = x.c,
          yc = (y = new BigNumber(y, b)).c;

      // Either NaN, ±Infinity or ±0?
      if (!xc || !yc || !xc[0] || !yc[0]) {

        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;

          // Return ±Infinity if either is ±Infinity.
          if (!xc || !yc) {
            y.c = y.e = null;

            // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;

      // Ensure xc points to longer array and xcL to its length.
      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

      // Initialise the result array with zeros.
      for (i = xcL + ycL, zc = []; i--; zc.push(0)) {}

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };

    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };

    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
    P.plus = function (y, b) {
      var t,
          x = this,
          a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
          ye = y.e / LOG_BASE,
          xc = x.c,
          yc = y.c;

      if (!xe || !ye) {

        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0);

        // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();
        for (; a--; t.push(0)) {}
        t.reverse();
      }

      a = xc.length;
      b = yc.length;

      // Point xc to the longer array, and b to the shorter length.
      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }

      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible
      return normalise(y, xc, ye);
    };

    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.precision = P.sd = function (sd, rm) {
      var c,
          n,
          v,
          x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);

        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {

        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--) {}

        // Add the number of digits of the first element.
        for (v = c[0]; v >= 10; v /= 10, n++) {}
      }

      if (sd && x.e + 1 > n) n = x.e + 1;

      return n;
    };

    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };

    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.squareRoot = P.sqrt = function () {
      var m,
          n,
          r,
          rep,
          t,
          x = this,
          c = x.c,
          s = x.s,
          e = x.e,
          dp = DECIMAL_PLACES + 4,
          half = new BigNumber('0.5');

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }

      // Initial estimate.
      s = Math.sqrt(+valueOf(x));

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '1e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      }

      // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;

        // Newton-Raphson iteration.
        for (;;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {

              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };

    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };

    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };

    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */
    P.toFormat = function (dp, rm, format) {
      var str,
          x = this;

      if (format == null) {
        if (dp != null && rm && (typeof rm === 'undefined' ? 'undefined' : _typeof(rm)) == 'object') {
          format = rm;
          rm = null;
        } else if (dp && (typeof dp === 'undefined' ? 'undefined' : _typeof(dp)) == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) != 'object') {
        throw Error(bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
            arr = str.split('.'),
            g1 = +format.groupSize,
            g2 = +format.secondaryGroupSize,
            groupSeparator = format.groupSeparator || '',
            intPart = arr[0],
            fractionPart = arr[1],
            isNeg = x.s < 0,
            intDigits = isNeg ? intPart.slice(1) : intPart,
            len = intDigits.length;

        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) {
            intPart += groupSeparator + intDigits.substr(i, g1);
          }if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };

    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
    P.toFraction = function (md) {
      var d,
          d0,
          d1,
          d2,
          e,
          exp,
          n,
          n0,
          n1,
          q,
          r,
          s,
          x = this,
          xc = x.c;

      if (md != null) {
        n = new BigNumber(md);

        // Throw if md is less than one or is not an integer, unless it is Infinity.
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);

      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc);

      // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;

      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s);

      // n0 = d1 = 0
      n0.c[0] = 0;

      for (;;) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;

      // Determine which fraction is closer to x, n0/d0 or n1/d1
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

      MAX_EXP = exp;

      return r;
    };

    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
    P.toNumber = function () {
      return +valueOf(this);
    };

    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };

    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
    P.toString = function (b) {
      var str,
          n = this,
          s = n.s,
          e = n.e;

      // Infinity or NaN?
      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };

    P.toUnit = function () {
      var str = P.toFormat.call(this);
      var addMap = " .K.M.G.T.P.B.E.Q.a.b.c.aa.ab.ac.ba.bb.bc.ca.cb.cc.x.y.z".split(".");

      var str = str.split(".")[0];
      var arr = str.split(",");
      var count = arr.splice(2).length;
      if (arr.length > 1) {
        var point = arr[1].split("");
        point.splice(2);
        arr[1] = point.join("");
      } else {
        count = -1;
      }
      return arr.join(".") + addMap[count + 1];
    };

    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };

    P._isBigNumber = true;

    if (hasSymbol) {
      P[Symbol.toStringTag] = 'BigNumber';

      // Node.js v10.12.0+
      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;
    }

    if (configObject != null) BigNumber.set(configObject);

    return BigNumber;
  }

  // PRIVATE HELPER FUNCTIONS

  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }

  // Return a coefficient array as a string of base 10 digits.
  function coeffToString(a) {
    var s,
        z,
        i = 1,
        j = a.length,
        r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;
      for (; z--; s = '0' + s) {}
      r += s;
    }

    // Determine trailing zeros.
    for (j = r.length; r.charCodeAt(--j) === 48;) {}

    return r.slice(0, j + 1 || 1);
  }

  // Compare the value of BigNumbers x and y.
  function compare(x, y) {
    var a,
        b,
        xc = x.c,
        yc = y.c,
        i = x.s,
        j = y.s,
        k = x.e,
        l = y.e;

    // Either NaN?
    if (!i || !j) return null;

    a = xc && !xc[0];
    b = yc && !yc[0];

    // Either zero?
    if (a || b) return a ? b ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    a = i < 0;
    b = k == l;

    // Either Infinity?
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    // Compare exponents.
    if (!b) return k > l ^ a ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = 0; i < j; i++) {
      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
    } // Compare lengths.
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }

  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
    }
  }

  // Assumes finite n.
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }

  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
  }

  function toFixedPoint(str, e, z) {
    var len, zs;

    // Negative exponent?
    if (e < 0) {

      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z) {}
      str = zs + str;

      // Positive exponent
    } else {
      len = str.length;

      // Append zeros.
      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z) {}
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  }

  // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

  // AMD.
  if (typeof define == 'function' && define.amd) {
    define(function () {
      return BigNumber;
    });

    // Node.js and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    module.exports = BigNumber;

    // Browser.
  } else {
    if (!globalObject) {
      globalObject = typeof self != 'undefined' && self ? self : window;
    }

    globalObject.BigNumber = BigNumber;
  }
})(undefined);

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
function load_map(obj, root, nameMap) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = nameMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var name = _step.value;

            obj[name] = root.getChildByName(name);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

exports.default = load_map;

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bignumber = require("../libs/bignumber.js");

var _bignumber2 = _interopRequireDefault(_bignumber);

var _resource = require("../data/resource");

var _resource2 = _interopRequireDefault(_resource);

var _dock = require("../data/dock");

var _dock2 = _interopRequireDefault(_dock);

var _route = require("../data/route");

var _route2 = _interopRequireDefault(_route);

var _ship = require("../data/ship");

var _ship2 = _interopRequireDefault(_ship);

var _buildSet = require("../data/buildSet");

var _buildSet2 = _interopRequireDefault(_buildSet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameDatas = function () {
    function GameDatas() {
        _classCallCheck(this, GameDatas);

        GameDatas.instance = this;

        this.curResource = new _resource2.default();
        this.dock = new _dock2.default(0);

        this.allRoutes = [];
        this.currentRoute = 0;
        this.unlockCount = 1;

        this.cagShips = {}; //服务器记录的船数据，ID根据获得先后确定
        this.packShips = []; //仓库中的船

        this.buildList = {};
        this.buildCap = 2;
        this.buildLevel = 1;

        this.sceneEventMap = {};

        this.levelAll = {
            dock: 1,
            repair: 1,
            build: 1,
            command: 1
        };

        this.repairNeed = [[]];

        this.buildNeed = [[]];

        this.selfNeed = [[]];

        this.buildLvl = [[]];

        this.debug();
        this.init();
    }

    _createClass(GameDatas, [{
        key: "init",
        value: function init() {
            this.initAllShipCarry();
        }
    }, {
        key: "debug",
        value: function debug() {
            var routeTest = new _route2.default(0, 0);
            var routeTestLev = new _route2.default(1, 0);
            var routeTestLas = new _route2.default(2, 0);

            this.unlockCount = 1;

            this.allRoutes.push(routeTest);
            this.allRoutes.push(routeTestLev);
            this.allRoutes.push(routeTestLas);

            this.cagShips[0] = {
                shipID: 0,
                level: 0,
                dockid: 0,
                rid: -1,
                packID: 0
            };
            this.cagShips[1] = {
                shipID: 1,
                level: 0,
                dockid: 1,
                rid: -1,
                packID: 0
            };
            this.cagShips[2] = {
                shipID: 0,
                level: 0,
                dockid: -1,
                rid: -1,
                packID: 0
            };
            this.cagShips[3] = {
                shipID: 1,
                level: 0,
                dockid: -1,
                rid: -1,
                packID: 1
            };
            this.cagShips[4] = {
                shipID: 1,
                level: 0,
                dockid: -1,
                rid: -1,
                packID: 2
            };
            this.cagShips.count = 5;

            this.dock.dockSet[0] = new _ship2.default(0, 0);
            this.dock.dockSet[1] = new _ship2.default(1, 1);

            this.packShips.push(new _ship2.default(0, 2));
            this.packShips.push(new _ship2.default(1, 3));
            this.packShips.push(new _ship2.default(1, 4));

            this.buildLevel = 3;
        }
    }, {
        key: "GetRepairFix",
        value: function GetRepairFix() {
            return 1 / Math.sqrt(this.levelAll.repair);
        }
    }, {
        key: "LevelDockUP",
        value: function LevelDockUP() {
            this.levelAll.dock++;
            this.dock.LevelUP();

            this.triggerSceneEvent("dock:lvlup");
            this.triggerSceneEvent("dock:full");
        }
    }, {
        key: "LevelPackUP",
        value: function LevelPackUP() {
            this.levelAll.repair++;
        }
    }, {
        key: "LevelBuildUP",
        value: function LevelBuildUP() {
            this.levelAll.build++;
            this.buildCap++;
            this.triggerSceneEvent("build:lvlup");
        }
    }, {
        key: "LevelSelfUP",
        value: function LevelSelfUP() {
            this.levelAll.command++;
        }
    }, {
        key: "addResChangeCallBack",
        value: function addResChangeCallBack(_func, key) {
            this.curResource.addChangeCallBack(_func, key);
        }
    }, {
        key: "getRouteUnlockCount",
        value: function getRouteUnlockCount() {
            return Math.min(this.allRoutes.length, this.unlockCount + 1);
        }
    }, {
        key: "GetAllRouter",
        value: function GetAllRouter() {
            var routText = "";

            var watchRoute = this.allRoutes.slice(0, this.unlockCount + 1);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = watchRoute[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var route = _step.value;

                    routText += route.curData.name + ",";
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return routText.slice(0, -1);
        }
    }, {
        key: "getCurrentRoute",
        value: function getCurrentRoute() {
            return this.allRoutes[this.currentRoute];
        }
    }, {
        key: "upShipToCurrentRoute",
        value: function upShipToCurrentRoute(posIndex) {
            if (this.currentRoute >= this.unlockCount) return;
            var _shipSet = this.dock.dockSet[posIndex];
            if (_shipSet.crash || _shipSet.routeOn != null) return;

            var route = this.allRoutes[this.currentRoute];

            if (route.shipFull()) return;

            route.placeShip(_shipSet);
            this.dock.outShip(posIndex);
        }
    }, {
        key: "onSceneEvent",
        value: function onSceneEvent(key, _func) {
            this.sceneEventMap[key] = _func;
        }
    }, {
        key: "triggerSceneEvent",
        value: function triggerSceneEvent() {
            var len = arguments.length;
            var args = [];
            for (var i = 0; i < len; i++) {
                args.push(arguments[i]);
            }var key = args[0];
            args.splice(0, 1);

            if (this.sceneEventMap[key]) {
                this.sceneEventMap[key].apply(this, args);
            }
        }
    }, {
        key: "changeShipPos",
        value: function changeShipPos(pindex1, pindex2) {
            if (pindex1 == pindex2) return false;

            var ship1 = this.dock.dockSet[pindex1];
            var ship2 = this.dock.dockSet[pindex2];

            if (ship2 == null) {
                if (ship1 == null || !ship1.isIdle() || ship1.repair) return false;
                this.dock.dockSet[pindex1] = null;
                this.dock.dockSet[pindex2] = ship1;
                ship1.dockid = pindex2;
                return true;
            } else if (ship1.isIdle() && ship2.isIdle() && !ship1.repair && !ship2.repair) {
                this.dock.dockSet[pindex1] = ship2;
                this.dock.dockSet[pindex2] = ship1;
                ship1.dockid = pindex2;
                ship2.dockid = pindex1;
                return true;
            }

            return false;
        }
    }, {
        key: "backShip",
        value: function backShip(posIndex) {
            var ship = this.dock.GetShipSet(posIndex);
            ship.sendBack();
        }
    }, {
        key: "dropShip",
        value: function dropShip(posIndex) {
            var ship = this.dock.GetShipSet(posIndex);
            ship.setIdle();
            this.dock.dropShip(posIndex);
        }
    }, {
        key: "getCagShip",
        value: function getCagShip(cid) {
            return this.cagShips[cid];
        }
    }, {
        key: "initAllShipCarry",
        value: function initAllShipCarry() {
            var _this2 = this;

            var dockSet = this.dock.dockSet;
            for (var index in dockSet) {
                if (dockSet.hasOwnProperty(index)) {
                    var ship = dockSet[index];
                    ship.setStateTrigger(1, this, function (pstate, shipSet) {
                        if (pstate != 0) {
                            _this2.GetPackResource(shipSet);
                        }
                        return false;
                    });
                }
            }
        }
    }, {
        key: "GetPackResource",
        value: function GetPackResource(_shipSet) {
            var route = _shipSet.routeOn;
            if (route == null) return;

            var resGain = new _resource2.default();
            resGain.randomResouce(route.curData.resource, _shipSet.curData.maxcap);

            this.curResource.resourceChange(resGain.buildObj());
        }
    }, {
        key: "showShipInfo",
        value: function showShipInfo(pindex) {
            var ship = this.dock.dockSet[pindex];
            if (!ship) return;

            this.triggerSceneEvent("scene:info", ship);
            this.infoShip = ship;
        }
    }, {
        key: "closeInfo",
        value: function closeInfo() {
            this.triggerSceneEvent("scene:infoclose");
            this.infoShip = null;
        }
    }, {
        key: "lvlInfoShip",
        value: function lvlInfoShip() {
            if (this.infoShip == null) return;
            /*Cost*/
            var cagID = this.infoShip.CagID;

            this.cagShips[cagID].level++;
            this.infoShip.SetShipCagID(cagID);

            this.triggerSceneEvent("ship:lvlup", this.infoShip);
        }
    }, {
        key: "changeRouteShow",
        value: function changeRouteShow(rindex) {
            this.currentRoute = rindex;
        }
    }, {
        key: "getRouteByIndex",
        value: function getRouteByIndex(rindex) {
            return this.allRoutes[rindex];
        }
    }, {
        key: "UnlockRoute",
        value: function UnlockRoute() {
            if (this.unlockCount < this.allRoutes.length - 1) {
                this.unlockCount++;
                this.triggerSceneEvent("route:unlock", this.unlockCount);
            } else {
                this.unlockCount++;
                this.triggerSceneEvent("route:unlock");
            }
        }
    }, {
        key: "repairShip",
        value: function repairShip(pindex) {
            var ship = this.dock.dockSet[pindex];
            if (!ship || !ship.crash) return;

            ship.StartRepair();
        }
    }, {
        key: "PackAutoIn",
        value: function PackAutoIn(shipSet) {
            this.packShips.push(shipSet);
            this.refreshAllPackID(shipSet);
            this.triggerSceneEvent("pack:collect", shipSet);
        }
    }, {
        key: "recollectShip",
        value: function recollectShip(pindex) {
            var ship = this.dock.dockSet[pindex];
            if (!ship || ship.crash) return;

            this.PackAutoIn(ship);
            this.dock.dockSet[pindex] = null;

            this.triggerSceneEvent("dock:pack", pindex);
        }
    }, {
        key: "TriggerBuildOK",
        value: function TriggerBuildOK() {
            this.triggerSceneEvent("build:trigger");
        }
    }, {
        key: "refreshAllPackID",
        value: function refreshAllPackID(shipSet) {
            if (shipSet) {
                shipSet.packID = this.packShips.length - 1;
            } else {
                for (var index = 0; index < this.packShips.length; index++) {
                    this.packShips[index].packID = index;
                }
            }
        }
    }, {
        key: "DockAutoIn",
        value: function DockAutoIn(shipSet) {
            var dockCap = this.dock.GetShipCap();
            for (var index = 0; index < dockCap; index++) {
                var dockPos = this.dock.dockSet[index];
                if (dockPos == null) {
                    this.dock.dockSet[index] = shipSet;
                    shipSet.dockid = index;
                    shipSet.setIdle();
                    this.triggerSceneEvent("dock:insert", shipSet);
                    break;
                }
            }
        }
    }, {
        key: "SendShipToDock",
        value: function SendShipToDock(shipSet) {
            if (shipSet.packID >= 0) this.packShips.splice(shipSet.packID, 1);

            this.DockAutoIn(shipSet);

            shipSet.packID = -1;
            this.refreshAllPackID();

            if (this.CheckDockFull()) {
                this.triggerSceneEvent("dock:full");
            }
        }
    }, {
        key: "CheckDockFull",
        value: function CheckDockFull() {
            var dockCap = this.dock.GetShipCap();
            var count = 0;
            for (var index = 0; index < dockCap; index++) {
                var dockPos = this.dock.dockSet[index];
                if (dockPos != null) count++;
            }
            return count == dockCap;
        }
    }, {
        key: "StartBuild",
        value: function StartBuild(_lev) {
            var build = new _buildSet2.default(_lev);
            return build;
        }
    }, {
        key: "gainShip",
        value: function gainShip(buildList) {
            var ShipSet = buildList.getBuildResult();
            this.cagShips[this.cagShips.count] = {
                shipID: ShipSet.shipID,
                level: 0,
                dockid: -1,
                rid: -1,
                packID: -1
            };
            var cagID = this.cagShips.count;
            ShipSet.SetShipCagID(cagID);

            this.cagShips.count++;
            return ShipSet;
        }
    }, {
        key: "showResAlt",
        value: function showResAlt(key, c_data, pos, _func) {
            var resNeed;
            if (key == "ship") {
                var shipSet = c_data.obj;
                resNeed = new _resource2.default(shipSet.curData.level);
            } else if (key == "route") {
                var route = c_data.obj;
                var handle = c_data.handle; //"Unlock,LevelUp"
                if (handle == "Unlock") {
                    resNeed = new _resource2.default(route.curData.unlock);
                } else if (handle == "LevelUp") {
                    resNeed = new _resource2.default(route.curData.level);
                }
            } else if (key == "build") {
                var rank = c_data.rank;
                var handle = c_data.handle; //"Build,LevelUp"
                if (handle == "Build") {
                    resNeed = new _resource2.default(this.buildNeed[rank]);
                } else if (handle == "LevelUp") {
                    resNeed = new _resource2.default(this.buildLvl[rank]);
                }
            } else if (key == "dock") {
                resNeed = new _resource2.default(this.dock.levelUp);
            } else if (key == "repair") {
                var rank = c_data.rank;
                resNeed = new _resource2.default(this.repairNeed[rank]);
            } else if (key == "self") {
                var rank = c_data.rank;
                resNeed = new _resource2.default(this.selfNeed[rank]);
            }

            var ok = this.curResource.checkResource(resNeed);

            var _this = this;
            this.triggerSceneEvent("res:alt", pos, resNeed, ok, function () {
                _this.curResource.costRes(resNeed);
                _func();
            });
        }
    }]);

    return GameDatas;
}();

exports.default = GameDatas;

},{"../data/buildSet":8,"../data/dock":9,"../data/resource":10,"../data/route":11,"../data/ship":12,"../libs/bignumber.js":13}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ShipContainer = require("../components/ShipContainer");

var _ShipContainer2 = _interopRequireDefault(_ShipContainer);

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RouteLay = function (_Laya$Panel) {
    _inherits(RouteLay, _Laya$Panel);

    function RouteLay() {
        _classCallCheck(this, RouteLay);

        var _this2 = _possibleConstructorReturn(this, (RouteLay.__proto__ || Object.getPrototypeOf(RouteLay)).call(this));

        _this2.showing = false;
        _this2.route = null;
        return _this2;
    }

    _createClass(RouteLay, [{
        key: "onEnable",
        value: function onEnable() {
            var _this3 = this;

            this.container = this.content.getChildByName("ShipsPanel");
            this.shipContent = this.container.getComponent(_ShipContainer2.default);
            this.RouteBG = this.content.getChildByName("RouteBG");
            this.levelBut = this.content.getChildByName("levelBut");
            this.RouteCover = this.content.getChildByName("cover");

            this.unlockBut = this.RouteCover.getChildByName("unlockBut");
            this.shipCount = this.content.getChildByName("shipCount");

            if (this.route != null) {
                this.refreshShips();
                this.refreshRoute();
            }

            this.showing = true;
            this.unlockBut.on(Laya.Event.CLICK, this, function (event) {
                _GameDatas2.default.instance.showResAlt("route", {
                    obj: _this3.route,
                    handle: "Unlock"
                }, { x: event.stageX, y: event.stageY }, function () {
                    _GameDatas2.default.instance.UnlockRoute();
                });
            });

            this.levelBut.on(Laya.Event.CLICK, this, function (event) {
                var _this = _this3;
                _GameDatas2.default.instance.showResAlt("route", {
                    obj: _this3.route,
                    handle: "LevelUp"
                }, { x: event.stageX, y: event.stageY }, function () {
                    _this.route.levelUP();
                    _this.refreshRoute();
                });
            });
        }
    }, {
        key: "setRoute",
        value: function setRoute(_route) {
            var _this4 = this;

            this.route = _route;

            var _this = this;
            this.route.setPlaceCallBack(function (ship, loseShip) {
                if (ship != null) {
                    _this.GainShip(ship);
                    _this4.shipCount.text = _this4.route.shipCount() + "/" + _this4.route.curData.maxShip;
                } else {
                    _this.LoseShip(loseShip);
                    _this4.shipCount.text = _this4.route.shipCount() + "/" + _this4.route.curData.maxShip;
                }
            });

            if (this.showing) {
                this.refreshShips();
                this.refreshRoute();
            }
        }
    }, {
        key: "refreshShips",
        value: function refreshShips() {
            this.createAllShips();
            this.updateShip(-1);
        }
    }, {
        key: "refreshRoute",
        value: function refreshRoute() {
            this.RouteBG.skin = this.route.curData.backPath;
            this.RouteCover.visible = this.routeIndex >= _GameDatas2.default.instance.unlockCount;
            this.levelBut.visible = !this.route.isMaxLevel();

            this.shipCount.text = this.route.shipCount() + "/" + this.route.curData.maxShip;
        }
    }, {
        key: "createAllShips",
        value: function createAllShips() {
            this.shipContent.setAllShip(this.route.shipOn);
            var _this = this;
            this.shipContent.eachConfig(function (obj) {
                _this.placeInitConfig(obj);
            });
        }
    }, {
        key: "placeInitConfig",
        value: function placeInitConfig(obj) {
            obj.moveSet.configAllData({
                lineLength: this.route.getDistance(),
                safeFix: this.route.curData.safeFix
            });
        }
    }, {
        key: "updateShip",
        value: function updateShip(fixID) {
            var _this = this;
            var func = function func(obj) {
                if (obj.shipset.getIconPath()) obj.moveSet.startMove();else obj.moveSet.setBlank();

                obj.moveSet.configAllData({
                    moveSpeed: obj.shipset.getData("baseSpeed"),
                    packtime: obj.shipset.getData("baseLoad")
                });
            };
            if (fixID < 0) {
                this.shipContent.eachConfig(func);
            } else {
                this.shipContent.fixIDConfig(fixID, func);
            }
        }
    }, {
        key: "GainShip",
        value: function GainShip(ship) {
            var _this = this;
            this.shipContent.addShip(ship);
            this.shipContent.fixIDConfig(ship.routeIndex, function (obj) {
                _this.placeInitConfig(obj);
            });
            this.updateShip(ship.routeIndex);
        }
    }, {
        key: "LoseShip",
        value: function LoseShip(ship) {
            this.shipContent.loseShip(ship);
        }
    }]);

    return RouteLay;
}(Laya.Panel);

exports.default = RouteLay;

},{"../components/ShipContainer":4,"../manager/GameDatas":15}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

var _buttonFloat = require("../components/buttonFloat");

var _buttonFloat2 = _interopRequireDefault(_buttonFloat);

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BuildTrip = function (_Laya$Sprite) {
    _inherits(BuildTrip, _Laya$Sprite);

    function BuildTrip() {
        _classCallCheck(this, BuildTrip);

        var _this2 = _possibleConstructorReturn(this, (BuildTrip.__proto__ || Object.getPrototypeOf(BuildTrip)).call(this));

        _this2.attachBuild = null;
        _this2.tripID = 0;
        return _this2;
    }

    _createClass(BuildTrip, [{
        key: "onEnable",
        value: function onEnable() {
            var _this3 = this;

            (0, _nameMap2.default)(this, this, ["mainLayUp", "buildingNode", "comBut", "ShipIcon", "packBut", "dockBut"]);
            (0, _nameMap2.default)(this, this.mainLayUp, ["BuildCov"]);
            (0, _nameMap2.default)(this, this.buildingNode, ["timeLeft"]);

            this.refreshBuildTrip();
            this.showing = true;

            this.resShip = null;

            this.allbutts = [];
            this.initBuildButtons();

            this.BuildCov.on(Laya.Event.CLICK, this, function () {
                _this3.allButtonSwitch();
            });

            this.comBut.on(Laya.Event.CLICK, this, function () {
                _this3.refreshShow = true;
                _this3.resShip = _GameDatas2.default.instance.gainShip(_this3.attachBuild);
                _this3.resultRefresh();
            });

            this.packBut.on(Laya.Event.CLICK, this, function () {
                _this3.sendShipTo(0);
                _this3.attachBuild = null;
            });

            this.dockBut.on(Laya.Event.CLICK, this, function () {
                _this3.sendShipTo(1);
                _this3.attachBuild = null;
            });

            this.frameLoop(29, this, function () {
                _this3.refreshBuildTrip();
            });

            this.reEmpty();
        }
    }, {
        key: "sendShipTo",
        value: function sendShipTo(id) {
            if (this.resShip != null) {
                if (id == 1) _GameDatas2.default.instance.DockAutoIn(this.resShip);else _GameDatas2.default.instance.PackAutoIn(this.resShip);

                this.reEmpty();
            }
        }
    }, {
        key: "reEmpty",
        value: function reEmpty() {
            this.refreshShow = false;
            this.resultRefresh();

            this.attachBuild = null;
            this.resShip = null;

            this.triggerED = false;
        }
    }, {
        key: "setBuilList",
        value: function setBuilList(_buildList) {
            this.attachBuild = _buildList;
            _buildList.buildPad = this;

            if (this.showing) this.refreshBuildTrip();
        }
    }, {
        key: "resultRefresh",
        value: function resultRefresh() {
            this.ShipIcon.visible = this.refreshShow;

            this.packBut.visible = false;
            this.dockBut.visible = false;

            if (this.refreshShow) {
                this.ShipIcon.skin = this.resShip.getIconPath();
                this.comBut.visible = false;

                this.packBut.visible = true;
                this.dockBut.visible = !_GameDatas2.default.instance.CheckDockFull();
            }
        }
    }, {
        key: "initBuildButtons",
        value: function initBuildButtons() {
            var _this = this;
            var maxBuildLev = _GameDatas2.default.instance.buildLevel;
            for (var lev = 1; lev <= maxBuildLev; lev++) {
                var button = new _buttonFloat2.default(lev);
                button.setClickCallBack(function (blev, event) {
                    _GameDatas2.default.instance.showResAlt("build", {
                        handle: "Build"
                    }, { x: event.stageX, y: event.stageY }, function () {
                        _this.startBuild(blev);
                        _this.allButtonSwitch();
                    });
                });
                button.skin = "comp/button.png";
                button.zOrder = 80;
                this.allbutts.push(button);
                this.mainLayUp.addChild(button);
            }
        }
    }, {
        key: "startBuild",
        value: function startBuild(level) {
            this.setBuilList(_GameDatas2.default.instance.StartBuild(level));
        }
    }, {
        key: "refreshBuildTrip",
        value: function refreshBuildTrip() {
            this.BuildCov.visible = this.attachBuild == null;
            this.comBut.visible = false;

            if (this.attachBuild != null) {

                if (!this.refreshShow) this.comBut.visible = this.attachBuild.checkOK();

                if (this.attachBuild.checkOK()) {
                    this.timeLeft.visible = false;
                    if (!this.triggerED) {
                        this.triggerED = true;
                        _GameDatas2.default.instance.TriggerBuildOK();
                    }
                    return;
                }

                this.timeLeft.visible = true;
                var timeLeft = Math.floor(this.attachBuild.getTimeLeft());
                var leftSec = timeLeft % 60;
                var leftMin = Math.floor(timeLeft / 60);
                if (leftSec < 10) this.timeLeft.text = leftMin + ":0" + leftSec;else this.timeLeft.text = leftMin + ":" + leftSec;
            } else {
                this.timeLeft.visible = false;
            }
        }
    }, {
        key: "allButtonSwitch",
        value: function allButtonSwitch() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.allbutts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var button = _step.value;

                    button.switchSet();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);

    return BuildTrip;
}(Laya.Sprite);

exports.default = BuildTrip;

},{"../components/buttonFloat":5,"../libs/nameMap":14,"../manager/GameDatas":15}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DeskTrip = function (_Laya$Image) {
    _inherits(DeskTrip, _Laya$Image);

    function DeskTrip() {
        _classCallCheck(this, DeskTrip);

        var _this = _possibleConstructorReturn(this, (DeskTrip.__proto__ || Object.getPrototypeOf(DeskTrip)).call(this));

        _this.shipSet = [];
        return _this;
    }

    _createClass(DeskTrip, [{
        key: "onEnable",
        value: function onEnable() {
            var _this2 = this;

            (0, _nameMap2.default)(this, this, ["shipicon1", "shipicon2", "shipicon3", "shadow1", "shadow2", "shadow3", "buttonOut1", "buttonOut2", "buttonOut3"]);

            this.iconSet = [this.shipicon1, this.shipicon2, this.shipicon3];
            this.shadowSet = [this.shadow1, this.shadow2, this.shadow3];
            this.buttonAll = [this.buttonOut1, this.buttonOut2, this.buttonOut3];

            this.showing = true;

            var index = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.buttonAll[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var but = _step.value;

                    but.visible = false;
                    but.index = index++;
                    but.on(Laya.Event.CLICK, this, function (event) {
                        var bindex = event.target.index;
                        _GameDatas2.default.instance.SendShipToDock(_this2.shipSet[bindex]);
                    });
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.refreshShow();
        }
    }, {
        key: "setShip",
        value: function setShip(placeIndex, shipSet) {
            if (placeIndex < 0 || placeIndex >= 3) return;
            this.shipSet[placeIndex] = shipSet;
            if (this.showing) {
                this.refreshShow();
            }
        }
    }, {
        key: "refreshShow",
        value: function refreshShow() {
            var isDockFull = _GameDatas2.default.instance.CheckDockFull();
            for (var i = 0; i < 3; i++) {
                var shipSet = this.shipSet[i];

                if (shipSet != null) {
                    this.iconSet[i].skin = shipSet.curData.iconPath;
                    this.shadowSet[i].skin = shipSet.curData.iconPath;
                    this.buttonAll[i].visible = !isDockFull;
                } else {
                    this.iconSet[i].skin = "";
                    this.shadowSet[i].skin = "";
                    this.buttonAll[i].visible = false;
                }
            }
        }
    }]);

    return DeskTrip;
}(Laya.Image);

exports.default = DeskTrip;

},{"../libs/nameMap":14,"../manager/GameDatas":15}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DockPos = function (_Laya$Box) {
    _inherits(DockPos, _Laya$Box);

    function DockPos() {
        _classCallCheck(this, DockPos);

        var _this = _possibleConstructorReturn(this, (DockPos.__proto__ || Object.getPrototypeOf(DockPos)).call(this));

        _this.shipSet = null;
        _this.showing = false;
        _this.busy = false;
        _this.dragging = false;

        _this.clickCallBack = function (s) {};
        _this.dragPlaceCallBack = function (e) {};
        return _this;
    }

    _createClass(DockPos, [{
        key: "onEnable",
        value: function onEnable() {
            var _this2 = this;

            (0, _nameMap2.default)(this, this, ["Pad", "PadActive", "PadING", "ShipIcon", "PadShadow", "BusyFlag", "repairBar"]);

            this.stateText = this.BusyFlag.getChildByName("stateText");
            this.repairLeft = this.repairBar.getChildByName("repairLeft");

            var hoverFlag = false;

            this.ShipIcon.on(Laya.Event.MOUSE_DOWN, this, function (e) {
                _this2.startDragShip(e);
            });
            this.ShipIcon.on(Laya.Event.MOUSE_UP, this, function (e) {
                _this2.endDragedShip(e, "release");
            });
            this.ShipIcon.on(Laya.Event.MOUSE_OUT, this, function (e) {
                hoverFlag = false;
                Laya.timer.frameOnce(30, _this2, function () {
                    if (!hoverFlag) _this2.endDragedShip(e, "hoverOut");
                });
            });
            this.ShipIcon.on(Laya.Event.MOUSE_OVER, this, function (e) {
                hoverFlag = true;
            });

            this.on(Laya.Event.CLICK, this, function () {
                if (!_this2.dragging && _this2.shipSet != null) {
                    _this2.clickCallBack(_this2.shipSet);
                }
            });

            this.oirPos = {
                x: this.ShipIcon.x,
                y: this.ShipIcon.y
            };

            this.showing = true;
            this.refreshState();

            this.forceBack = false;

            this.float.play();
            this.frameLoop(29, this, function () {
                _this2.updateRepair();
            });
        }
    }, {
        key: "refreshState",
        value: function refreshState() {

            this.Pad.visible = this.shipSet == null && !this.busy;
            this.PadActive.visible = this.shipSet != null && !this.busy;

            this.PadING.visible = this.busy;

            if (this.shipSet != null && this.shipSet.getIconPath()) {
                this.ShipIcon.skin = this.shipSet.getIconPath();
                this.PadShadow.skin = this.shipSet.getIconPath();
                this.ShipIcon.visible = true;
            } else this.ShipIcon.visible = false;

            this.ShipIcon.gray = this.busy;

            this.PadShadow.visible = this.ShipIcon.visible && !this.dragging && !this.busy;

            this.BusyFlag.visible = this.busy;
            this.repairBar.visible = this.shipSet != null && this.shipSet.crash && this.shipSet.repair;

            this.updateRepair();
        }
    }, {
        key: "updateRepair",
        value: function updateRepair() {
            if (this.shipSet == null) return;
            if (!this.shipSet.repair) return;

            var start = this.shipSet.repairStart;
            var now = new Date();

            var timePassBy = Math.floor((now - start) / 1000);
            var timeNeed = Math.floor(this.shipSet.curData.repair * _GameDatas2.default.instance.GetRepairFix());

            if (timePassBy >= timeNeed) this.shipSet.repairCompelete();

            var timeLeft = timeNeed - timePassBy;
            var leftSec = timeLeft % 60;
            var leftMin = Math.floor(timeLeft / 60);
            if (leftSec < 10) this.repairLeft.text = leftMin + ":0" + leftSec;else this.repairLeft.text = leftMin + ":" + leftSec;

            this.repairBar.value = timePassBy / timeNeed;
        }
    }, {
        key: "setClickCallBack",
        value: function setClickCallBack(_func) {
            this.clickCallBack = _func;
        }
    }, {
        key: "setdragPlaceCallBack",
        value: function setdragPlaceCallBack(_func) {
            this.dragPlaceCallBack = _func;
        }
    }, {
        key: "clearShip",
        value: function clearShip() {
            this.placeShip(-1);
        }
    }, {
        key: "setBusy",
        value: function setBusy() {
            this.busy = true;
            this.float.stop();
            this.refreshState();
        }
    }, {
        key: "resumeBusy",
        value: function resumeBusy() {
            this.busy = false;
            this.forceBack = false;

            this.float.play();

            this.refreshState();
        }
    }, {
        key: "placeShip",
        value: function placeShip(_ship) {
            this.shipSet = _ship;

            if (_ship != null) _ship.dockPos = this;

            if (this.showing) {
                this.refreshState();
            }
        }
    }, {
        key: "setSendBack",
        value: function setSendBack() {
            this.setWorkState("ForceBack");
            this.forceBack = true;
        }
    }, {
        key: "setCrashBack",
        value: function setCrashBack() {
            this.setWorkState("CrashBack");
            this.forceBack = true;
        }
    }, {
        key: "setWorkState",
        value: function setWorkState(_text) {
            if (this.forceBack) return;
            this.stateText.text = _text;
        }
    }, {
        key: "checkDraggable",
        value: function checkDraggable() {
            return !(this.busy || this.shipSet.repair);
        }
    }, {
        key: "startDragShip",
        value: function startDragShip(event) {
            var _this3 = this;

            if (!this.checkDraggable()) return;

            this.float.stop();
            this.dragging = true;

            var befPos = {
                x: this.ShipIcon.x + this.x + this.scene.dock.x - this.scene.dock.hScrollBar.value,
                y: this.ShipIcon.y + this.y + this.scene.dock.y
            };

            this.ShipIcon.pos(befPos.x, befPos.y);
            this.ShipIcon.startDrag();

            this.ShipIcon.zOrder = 100;
            this.scene.addChild(this.ShipIcon);

            this.frameOnce(2, this, function () {
                _this3.dragPlaceCallBack("drag", event);
            });

            this.refreshState();
            event.stopPropagation();
        }
    }, {
        key: "endDragedShip",
        value: function endDragedShip(event, release) {
            var _this4 = this;

            if (!this.dragging) return;

            this.frameOnce(2, this, function () {
                _this4.dragPlaceCallBack(release, event);
            });
        }
    }, {
        key: "backPos",
        value: function backPos() {
            this.dragging = false;

            this.ShipIcon.pos(this.oirPos.x, this.oirPos.y);
            this.ShipIcon.stopDrag();
            this.refreshState();

            this.addChild(this.ShipIcon);

            if (!this.busy) this.float.play();

            this.ShipIcon.zOrder = 0;
        }
    }]);

    return DockPos;
}(Laya.Box);

exports.default = DockPos;

},{"../libs/nameMap":14,"../manager/GameDatas":15}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InfoLay = function (_Laya$Panel) {
    _inherits(InfoLay, _Laya$Panel);

    function InfoLay() {
        _classCallCheck(this, InfoLay);

        var _this2 = _possibleConstructorReturn(this, (InfoLay.__proto__ || Object.getPrototypeOf(InfoLay)).call(this));

        _this2.ship = null;
        return _this2;
    }

    _createClass(InfoLay, [{
        key: "onEnable",
        value: function onEnable() {
            var _this3 = this;

            (0, _nameMap2.default)(this, this.content, ["shipName", "shipDesc", "ShipIcon", "proImages", "buttonBack", "buttonPic", "buttonLvlup", "levelab", "job"]);

            this.buttonBack.on(Laya.Event.CLICK, this, function () {
                _GameDatas2.default.instance.closeInfo();
            });

            this.buttonLvlup.on(Laya.Event.CLICK, this, function (event) {
                var _this = _this3;
                _GameDatas2.default.instance.showResAlt("ship", {
                    obj: _this3.ship
                }, { x: event.stageX, y: event.stageY }, function () {
                    _GameDatas2.default.instance.lvlInfoShip();
                    _this.refreshShipInfo();
                });
            });

            this.frameLoop(60, this, function () {
                _this3.refreshJOB();
            });
            this.refreshJOB();
        }
    }, {
        key: "setShipSet",
        value: function setShipSet(_shipSet) {
            this.ship = _shipSet;
            this.refreshShipInfo();
            this.refreshJOB();
        }
    }, {
        key: "refreshShipInfo",
        value: function refreshShipInfo() {
            this.shipName.text = this.ship.curData.name;
            this.shipDesc.text = this.ship.curData.desc;
            this.ShipIcon.skin = this.ship.getIconPath();

            this.buttonLvlup.visible = this.ship.curData.lvlim > this.ship.getCurrentLevel();

            this.levelab.text = "Lev:" + this.ship.getCurrentLevelText();
        }
    }, {
        key: "refreshJOB",
        value: function refreshJOB() {
            if (this.ship != null) this.job.text = this.ship.GetJobText();
        }
    }]);

    return InfoLay;
}(Laya.Panel);

exports.default = InfoLay;

},{"../libs/nameMap":14,"../manager/GameDatas":15}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PlanLay = function (_Laya$Panel) {
    _inherits(PlanLay, _Laya$Panel);

    function PlanLay() {
        _classCallCheck(this, PlanLay);

        return _possibleConstructorReturn(this, (PlanLay.__proto__ || Object.getPrototypeOf(PlanLay)).call(this));
    }

    _createClass(PlanLay, [{
        key: "onEnable",
        value: function onEnable() {
            var _this3 = this;

            (0, _nameMap2.default)(this, this.content, ["dockLev", "packLev", "buidlLev", "selfLev"]);

            var _this = this;

            this.dockLev.getChildByName("levelUp").on(Laya.Event.CLICK, this, function (event) {
                _GameDatas2.default.instance.showResAlt("dock", {}, { x: event.stageX, y: event.stageY }, function () {
                    _GameDatas2.default.instance.LevelDockUP();
                    _this.refreshLevels();
                });
            });

            this.packLev.getChildByName("levelUp").on(Laya.Event.CLICK, this, function (event) {
                _GameDatas2.default.instance.showResAlt("repair", {}, { x: event.stageX, y: event.stageY }, function () {
                    _GameDatas2.default.instance.LevelPackUP();
                    _this3.refreshLevels();
                });
            });

            this.buidlLev.getChildByName("levelUp").on(Laya.Event.CLICK, this, function (event) {
                _GameDatas2.default.instance.showResAlt("build", {
                    handle: "LevelUp"
                }, { x: event.stageX, y: event.stageY }, function () {
                    _GameDatas2.default.instance.LevelBuildUP();
                    _this3.refreshLevels();
                });
            });

            this.selfLev.getChildByName("levelUp").on(Laya.Event.CLICK, this, function (event) {
                _GameDatas2.default.instance.showResAlt("self", {}, { x: event.stageX, y: event.stageY }, function () {
                    _GameDatas2.default.instance.LevelSelfUP();
                    _this3.refreshLevels();
                });
            });

            this.levelTexts = [this.dockLev.getChildByName("level"), this.packLev.getChildByName("level"), this.buidlLev.getChildByName("level"), this.selfLev.getChildByName("level")];
            this.refreshLevels();
        }
    }, {
        key: "refreshLevels",
        value: function refreshLevels() {
            var allLevels = _GameDatas2.default.instance.levelAll;

            this.levelTexts[0].text = "Lev:" + allLevels.dock;
            this.levelTexts[1].text = "Lev:" + allLevels.repair;
            this.levelTexts[2].text = "Lev:" + allLevels.build;
            this.levelTexts[3].text = "Lev:" + allLevels.command;
        }
    }]);

    return PlanLay;
}(Laya.Panel);

exports.default = PlanLay;

},{"../libs/nameMap":14,"../manager/GameDatas":15}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProTrip = function (_Laya$Panel) {
    _inherits(ProTrip, _Laya$Panel);

    function ProTrip() {
        _classCallCheck(this, ProTrip);

        var _this = _possibleConstructorReturn(this, (ProTrip.__proto__ || Object.getPrototypeOf(ProTrip)).call(this));

        _this.tripMap = [];
        _this.showing = false;
        _this.ship = null;
        return _this;
    }

    _createClass(ProTrip, [{
        key: "onEnable",
        value: function onEnable() {
            (0, _nameMap2.default)(this, this.content, ["baseBG", "proName"]);
            (0, _nameMap2.default)(this, this.baseBG, ["proCur", "proNextDec", "proNextAdd"]);

            this.showing = true;
            this.refreshContent();
        }
    }, {
        key: "refreshPro",
        value: function refreshPro(_shipSet) {
            this.ship = _shipSet;
            this.refreshContent();
        }
    }, {
        key: "refreshContent",
        value: function refreshContent() {
            this.proName.text = this.proText;

            if (this.ship) {
                var curValue = this.ship.getData(this.proConnect);
                var nextValue = this.ship.getNextLvlData(this.proConnect);

                var curLen = this.proCalc(curValue) * 200 + 10;
                var nextLen = this.proCalc(nextValue) * 200 + 10;

                if (curLen < nextLen) {
                    this.proCur.width = curLen;
                    this.proNextAdd.width = nextLen;
                } else if (curLen > nextLen) {
                    this.proNextDec.width = curLen;
                    this.proCur.width = nextLen;
                } else {
                    this.proCur.width = curLen;
                }

                this.proCur.visible = true;
                this.proNextAdd.visible = curLen < nextLen;
                this.proNextDec.visible = curLen > nextLen;
            }
        }
    }, {
        key: "setProName",
        value: function setProName(_text) {
            this.proText = _text;

            if (this.showing) this.refreshContent();
        }
    }, {
        key: "setProConnect",
        value: function setProConnect(_text, _lenfunc) {
            this.proConnect = _text;
            this.proCalc = _lenfunc;

            if (this.showing) this.refreshContent();
        }
    }]);

    return ProTrip;
}(Laya.Panel);

exports.default = ProTrip;

},{"../libs/nameMap":14}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

var _resource = require("../data/resource");

var _resource2 = _interopRequireDefault(_resource);

var _nameMap = require("../libs/nameMap");

var _nameMap2 = _interopRequireDefault(_nameMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResourceAlt = function (_Laya$Panel) {
    _inherits(ResourceAlt, _Laya$Panel);

    function ResourceAlt() {
        _classCallCheck(this, ResourceAlt);

        var _this = _possibleConstructorReturn(this, (ResourceAlt.__proto__ || Object.getPrototypeOf(ResourceAlt)).call(this));

        _this.res = new _resource2.default();
        _this.okCallBack = function () {};
        _this.cancelCallBack = function () {};
        return _this;
    }

    _createClass(ResourceAlt, [{
        key: "onEnable",
        value: function onEnable() {
            var _this2 = this;

            (0, _nameMap2.default)(this, this.content, ["oil", "ammo", "steel", "Al", "OKbut", "Cancelbut"]);

            this.showing = true;
            this.refreshResNum();

            this.OKbut.on(Laya.Event.CLICK, this, function () {
                _this2.okCallBack(_this2.res);
            });

            this.Cancelbut.on(Laya.Event.CLICK, this, function (event) {
                _this2.cancelCallBack();
            });
        }
    }, {
        key: "setResourceShow",
        value: function setResourceShow(_res) {
            this.res = _res;

            if (this.showing) this.refreshResNum();
        }
    }, {
        key: "setEnough",
        value: function setEnough(en_fl) {
            this.enoughFlag = en_fl;
            if (this.showing) {
                this.refreshOKBut();
            }
        }
    }, {
        key: "refreshOKBut",
        value: function refreshOKBut() {
            this.OKbut.visible = this.enoughFlag;
        }
    }, {
        key: "refreshResNum",
        value: function refreshResNum() {
            this.oil.text = this.res.oil.toUnit();
            this.ammo.text = this.res.ammo.toUnit();
            this.steel.text = this.res.steel.toUnit();
            this.Al.text = this.res.Al.toUnit();
        }
    }]);

    return ResourceAlt;
}(Laya.Panel);

exports.default = ResourceAlt;

},{"../data/resource":10,"../libs/nameMap":14,"../manager/GameDatas":15}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bignumber = require("../libs/bignumber.js");

var _bignumber2 = _interopRequireDefault(_bignumber);

var _GameDatas = require("../manager/GameDatas");

var _GameDatas2 = _interopRequireDefault(_GameDatas);

var _SceneLayer = require("../components/SceneLayer");

var _SceneLayer2 = _interopRequireDefault(_SceneLayer);

var _targetSwitch = require("../components/targetSwitch");

var _targetSwitch2 = _interopRequireDefault(_targetSwitch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MainScene = function (_Laya$Scene) {
    _inherits(MainScene, _Laya$Scene);

    function MainScene() {
        _classCallCheck(this, MainScene);

        var _this2 = _possibleConstructorReturn(this, (MainScene.__proto__ || Object.getPrototypeOf(MainScene)).call(this));

        if (_GameDatas2.default.instance) _this2.MainManager = _GameDatas2.default.instance;else _this2.MainManager = new _GameDatas2.default();
        return _this2;
    }

    _createClass(MainScene, [{
        key: "onEnable",
        value: function onEnable() {
            var _this3 = this;

            var _this = this;
            this.MainManager.addResChangeCallBack(function (res) {
                _this.updateResShow(res);
                _this.updateUpgradeDetect(res);
            }, "mainScene");

            this.sceneLayer = this.getComponent(_SceneLayer2.default);

            this.initRoute();
            this.initDock();
            this.initPros();
            this.initWare();
            this.initBuild();
            this.initPlan();

            this.initResAlt();

            this.uiState = 0;

            this.backBut.on(Laya.Event.CLICK, this, function () {
                _this3.warePanel.x = -640;
                _this3.buildPanel.x = -640;
                _this3.backBut.x = -600;
                _this3.planPanel.x = -640;

                _this3.buildPanel.zOrder = 20;
                _this3.warePanel.zOrder = 20;
                _this3.planPanel.zOrder = 20;

                _this3.uiState = 0;
            });

            this.initButtonFloat();

            this.initSceneEvent();
            this.initTabSwitch();
        }
    }, {
        key: "backAllPabel",
        value: function backAllPabel() {
            this.buildPanel.zOrder = 20;
            this.warePanel.zOrder = 20;
            this.planPanel.zOrder = 20;
        }
    }, {
        key: "updateResShow",
        value: function updateResShow(res) {
            for (var key in res) {
                if (res.hasOwnProperty(key)) {
                    this[key].text = res[key].toUnit();
                }
            }
        }
    }, {
        key: "initRoute",
        value: function initRoute() {
            var data = this.MainManager.getCurrentRoute();
            this.router.setRoute(data);

            this.sceneLayer.setRoutePanel(this.router);
        }
    }, {
        key: "initDock",
        value: function initDock() {
            this.sceneLayer.setDockPanel(this.dock);

            var rect = new Laya.Rectangle(this.router.x, this.router.y, this.router.width, this.router.height);

            var _this = this;
            this.sceneLayer.setDragCallback(function (posIndex, event) {
                if (event.flag == "release") {
                    if (rect.contains(event.stageX, event.stageY)) {
                        _this.MainManager.upShipToCurrentRoute(posIndex);
                    } else {
                        _this.checkPosChange(posIndex, event.stageX, event.stageY);
                        _this.checkHandles(posIndex, event.stageX, event.stageY);
                    }
                }

                _this.buttonFloatSwitch(event.flag);
            });
        }
    }, {
        key: "initPros",
        value: function initPros() {
            this.sceneLayer.setInfoPanel(this.infoLayer.proImages);
        }
    }, {
        key: "initButtonFloat",
        value: function initButtonFloat() {
            var _this4 = this;

            this.floatMaps = [{
                target: this.Info,
                handle: function handle(pIndex) {
                    _this4.MainManager.showShipInfo(pIndex);
                }
            }, {
                target: this.Repair,
                handle: function handle(pIndex) {
                    _this4.MainManager.repairShip(pIndex);
                }
            }, {
                target: this.wareHouse,
                handle: function handle(pIndex) {
                    _this4.MainManager.recollectShip(pIndex);
                }
            }];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.floatMaps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var float = _step.value;

                    float.comp = float.target.getComponent(_targetSwitch2.default);
                    float.comp.setState(1);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "initWare",
        value: function initWare() {
            var _this5 = this;

            this.wareBut.on(Laya.Event.CLICK, this, function () {
                _this5.warePanel.x = 0;
                _this5.backBut.x = 40;
                _this5.backAllPabel();
                _this5.warePanel.zOrder = 25;
                _this5.uiState = 2;
            });

            this.sceneLayer.setDeskPanel(this.warePanel.content.getChildByName("mainContent"));
        }
    }, {
        key: "initBuild",
        value: function initBuild() {
            var _this6 = this;

            this.buildBut.on(Laya.Event.CLICK, this, function () {
                _this6.buildPanel.x = 0;
                _this6.buildDot.visible = false;
                _this6.backBut.x = 450;

                _this6.backAllPabel();
                _this6.buildPanel.zOrder = 25;

                _this6.uiState = 3;

                _this6.sceneLayer.buildTripCheck();
            });

            this.buildDot.visible = false;

            this.sceneLayer.setBuildPanel(this.buildPanel.content.getChildByName("MainContent"));
        }
    }, {
        key: "initPlan",
        value: function initPlan() {
            var _this7 = this;

            this.planBut.on(Laya.Event.CLICK, this, function () {
                _this7.planPanel.x = 0;
                _this7.backBut.x = 245;

                _this7.backAllPabel();
                _this7.planPanel.zOrder = 25;
                _this7.uiState = 4;
            });
        }
    }, {
        key: "initResAlt",
        value: function initResAlt() {
            this.sceneLayer.setAltLayer();
        }
    }, {
        key: "initSceneEvent",
        value: function initSceneEvent() {
            var _this8 = this;

            this.MainManager.onSceneEvent("scene:info", function (ship) {
                _this8.sceneLayer.refreshInfoShow(ship);
                _this8.infoLayer.setShipSet(ship);
                _this8.infoLayer.x = 0;

                _this8.uiState = 1;
            });

            this.MainManager.onSceneEvent("scene:infoclose", function () {
                _this8.infoLayer.x = -640;

                _this8.uiState = 0;
            });

            this.MainManager.onSceneEvent("ship:lvlup", function (ship) {
                _this8.infoLayer.refreshShipInfo();
                _this8.sceneLayer.refreshInfoShow(ship);
            });

            this.MainManager.onSceneEvent("dock:pack", function (pindex) {
                _this8.sceneLayer.recollectPos(pindex);
            });

            this.MainManager.onSceneEvent("pack:collect", function (ship) {
                _this8.sceneLayer.insertPackShip(ship);
            });

            this.MainManager.onSceneEvent("route:unlock", function (newIndex) {
                if (newIndex) {
                    _this8.routeTable.labels = _this8.MainManager.GetAllRouter();
                    _this8.sceneLayer.unlockRoute(newIndex);
                    _this8.sceneLayer.refreshRouterZorder();
                }
                _this8.sceneLayer.updateRoute(_this8.MainManager.currentRoute);
            });

            this.MainManager.onSceneEvent("dock:insert", function (shipSet) {
                _this8.sceneLayer.insertDockPos(shipSet);
                _this8.sceneLayer.refreshAllDeskByOutShip(shipSet);
            });

            this.MainManager.onSceneEvent("dock:full", function (shipSet) {
                _this8.sceneLayer.AllDesckRefreshFull();
            });

            this.MainManager.onSceneEvent("dock:lvlup", function () {
                _this8.sceneLayer.updateAllDockPos();
            });

            this.MainManager.onSceneEvent("build:lvlup", function () {
                _this8.sceneLayer.updateAllBuildTrip();
            });

            this.MainManager.onSceneEvent("build:trigger", function () {
                _this8.buildOKTrigger();
            });

            this.MainManager.onSceneEvent("res:alt", function (pos, res, ok, _func) {
                _this8.sceneLayer.showRes(res, ok, pos.x, pos.y, _func);
            });
        }
    }, {
        key: "initTabSwitch",
        value: function initTabSwitch() {
            var _this9 = this;

            this.routeTable.labels = this.MainManager.GetAllRouter();
            this.routeTable.selectedIndex = this.MainManager.currentRoute;

            this.routeTable.selectHandler = new Laya.Handler(this, function (index) {
                _this9.MainManager.changeRouteShow(index);
                _this9.sceneLayer.refreshRouterZorder();
            });
        }
    }, {
        key: "buttonEachMap",
        value: function buttonEachMap(func) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.floatMaps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var float = _step2.value;

                    func.call(this, float);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "buttonFloatSwitch",
        value: function buttonFloatSwitch(flag) {
            if (flag == "release" || flag == "hoverOut") {
                this.buttonEachMap(function (float) {
                    float.comp.setState(1);
                });
            } else {
                this.buttonEachMap(function (float) {
                    float.comp.setState(2);
                });
            }
        }
    }, {
        key: "checkPosChange",
        value: function checkPosChange(pindex, x, y) {
            var allPoses = this.sceneLayer.poses;
            var offsetPosx = this.dock.hScrollBar.value - this.dock.x;
            var offsetPosy = this.dock.y;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = allPoses[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var posi = _step3.value;

                    var rect = new Laya.Rectangle(posi.x - offsetPosx, offsetPosy + posi.y, posi.width, posi.height);
                    if (rect.contains(x, y)) {
                        var res = this.MainManager.changeShipPos(pindex, posi.posIndex);

                        if (res) this.sceneLayer.changePos(pindex, posi.posIndex);

                        break;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: "checkHandles",
        value: function checkHandles(pindex, x, y) {
            var _this10 = this;

            this.buttonEachMap(function (float) {
                var but = float.target;
                var rect = new Laya.Rectangle(but.x, but.y, but.width, but.height);

                if (rect.contains(x, y)) {
                    float.handle.call(_this10, pindex);
                }
            });
        }
    }, {
        key: "buildOKTrigger",
        value: function buildOKTrigger() {
            if (this.uiState == 3) return;
            this.buildDot.visible = true;
        }
    }, {
        key: "updateUpgradeDetect",
        value: function updateUpgradeDetect(resource) {}
    }]);

    return MainScene;
}(Laya.Scene);

exports.default = MainScene;

},{"../components/SceneLayer":3,"../components/targetSwitch":7,"../libs/bignumber.js":13,"../manager/GameDatas":15}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
